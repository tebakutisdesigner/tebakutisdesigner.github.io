/////////////////////////////////////////////////////////////////////////////////////
//"Hell House"
//An awesome midterm text adventure that loves you
//
//By the inestimable T. Eric Bakutis, Esquire
/////////////////////////////////////////////////////////////////////////////////////

#include<string> //include string manipulation functions
#include<stdlib.h> //this allows for random number functions
#include<iostream> //this allows us to see input and output
#include<time.h> //this seeds our random number formula based on the current time

using namespace std; //this is here because the C++ gods declared that it must be so.

//This allows us to define a custom variable from scratch
struct userInput //below we'll define the player's class, health, int, alertness, agility, strength, luck, and class name
{
	bool bTwoWords;
	string SFirstWord;
	string SSecondWord;
};

struct player //below we'll define the statistics for the player
{
	int iPlayerMaxHP;
	int iPlayerHP;
	int iPlayerAP;
	int iPlayerXP;
	int iPlayerNextLevel;
	int iPlayerLevel;
};

struct mobGhost //below we'll define the statistics for the ghost the player encounters in the game
{
	int iGhostHP;
	int iGhostAP;
	int iGhostXP;
	string sGhostDescription;
	string sGhostAttack;
};

//Declares functions that are defined later in the code so C++ doesn't have a heart attack.
userInput getUserInput(); //this function gets input from the user
userInput parseUserInput(string, userInput); //this function parses user input into one or two words

void playerLevelGain(); //check to see if the player has gained a level
bool doCombat(int, int, int, int, int, string); //handle player combat with monsters
bool checkAttack(); //find out if a player successfully attacks
bool checkMonsterAttack(); //find out if a monster successfully attacks
bool checkRetreat(); //find out if the player successfully retreated
void getHelp(); //show help for the user
void getInventory(); //show inventory for the user
void doPlayerDeath(); //handle the player's death

//Create player - stats from left to right are Max HP, current HP, current Attack Power, 
//current XP gained, XP to next level, and the player's current level
player Self = {10, Self.iPlayerMaxHP, 1, 0, 15, 1};
bool bPlayerDead = false; //set a boolean to track if the player has lost the game

//Create ghosts - first number is HP, second number is Attack Power, third number is XP given when killed
//fourth string is description for Combat Engine, fifth string is description of attack
mobGhost Cheryl = {10, 1, 10, "a viscous shadow", "bites you with its teeth"}; //Cheryl Morris, murdered by her mother in a moment of insanity
mobGhost Lisa = {36, 2, 20, "a raving, wild-eyed madwoman", "rakes you with her bloody nails"}; //Lisa Morris, locked in the basement by her husband until she went insane
mobGhost James = {20, 2, 10, "a blistered, faceless, still cooking body", "burns you with his oven"}; //James Morris, baking forever in his wife's oven

//Initialize consumable item stats
int iHealthKitHP = 5;
int iKnifeDamage = 5;

//Inventory Item Tracking
bool bHaveBlindfold = false;
bool bHaveRope = false;
bool bHaveKnife = false;
bool bHaveKey = false;
bool bHaveHealthKit = false;
bool bFoundFirstHealthKit = false;
bool bHaveNote = false;

void roomSnowyStart(); //this function handles the snowy room
void roomFrontPorch(); //this function handles the front porch
void roomFrontRoom(); //this function handles the front room
void roomHall(); //this function handles the hall room
void roomKitchen(); //this function handles the kitchen
void roomBackPorch(); //this function handles the back porch
void roomGraveStones(); //this function handles the gravestones
void roomSnowyRoad(); //this function handles the final escape from the house

//Game Progress Tracking--as the player accomplishes tasks, these values change to reflect progress
//Snowy Room Progress Tracking
bool bBlindfolded = true;
bool bBound = true;
bool bFoundRock = false;

//Front Porch Progress Tracking
bool bFrontPorchFirstLook = true;
bool bFrontPorchDoorBanging = true;

//Front Room Progress Tracking
bool bFrontRoomDrawerClosed = true;
bool bCorpseOpen = false;
bool bFrontRoomKeyFound = true;
bool bFrontRoomFoundNote = false;

//Room Hall Progress Tracking
bool bHallPlayerWarned = false;
bool bHallTrapDoorOpen = false;
bool bHallTrapDoorTied = false;
bool bHallWayDoorLocked = true;
bool bHallWayDoorClosed = true;
bool bDeaditeHasArrived = false;
bool bDeaditeIsDead = false;

//Room Kitchen Progress Tracking
bool bKitchenOvenDoorOpen = false;
bool bBakedManHasArrived = false;
bool bBakedManIsDead = false;

//Back Porch Progress Tracking
bool bBackPorchDoorOpen = false;
bool bBackPorchDoorLocked = true;
bool bBackPorchFoundGravestones = false;

//Room Gravestones Progress Tracking
bool bGhostHasArrived = false;
bool bGhostIsDead = false;
bool bGhostHasPleaded = false;

//This is our main game loop
void main()
{	
	//Start the game

	system("color 1b");

	cout << "                                   ____                                   " << endl
         << "                      _           |---||            _                     " << endl
         << "                      ||__________|   ||___________||                     " << endl
         << "                     /_ _ _ _ _ _ |:._|'_ _ _ _ _ _ _\`.                  " << endl
         << "                    /_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\:`.                " << endl
         << "                   /_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\::`.              " << endl
         << "                  /:.___________________________________\:::`-._          " << endl
         << "              _.-'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _`::::::`-.._     " << endl
         << "         _.-' _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ `:::::::::`-._  " << endl
         << "       ,'_:._________________________________________________`:_.::::-';` " << endl
         << "       `.'/ || |:::::`.'/::::::::`.'/::::::::`.'/::::::|.`.'/.|     :|    " << endl
         << "         ||  || |::::::||::::::::::||::::::::::||:::::::|..||..|     ||   " << endl
         << "         ||  || |  __  || ::  ___  || ::  __   || ::    |..||;||     ||   " << endl
         << "         ||  || | |::| || :: |:::| || :: |::|  || ::    |.|||:||_____||__ " << endl
         << "         ||  || | |::| || :: |:::| || :: |::|  || ::    |.|||:||_|_|_||,( " << endl
         << "         ||_.|| | |::| || :: |:::| || :: |::|  || ::    |.'||..|    _||,| " << endl
         << "      .-'::_.:'.:-.--.-::--.-:.--:-::--.--.--.-::--.--.-:.-::,'.--.'_|| | " << endl
         << "       );||_|__||_|__|_||__|_||::|_||__|__|__|_||__|__|_|;-'|__|_(,' || '-" << endl
         << "       ||||  || |. . . ||. . . . . ||. . . . . ||. . . .|::||;''||   ||:' " << endl
         << "       ||||.;  _|._._._||._._._._._||._._._._._||._._._.|:'||,, ||,,      " << endl
         << "        '''''           ''-         ''-         ''-         '''  '''      " << endl
		 << endl
	     << " << ----------------------- H E L L    H O U S E --------------------- >> " << endl
		 << " << ----------------------- by Eric Bakutis -------------------------- >> " << endl
		 << endl;

	system("pause");
	system("cls");

	//Introductory text to the game
	cout << "BANG!" << endl
		 << endl
		 << "The sound jerks you awake. You're lying in what feels like cold, wet snow, " << endl
		 << "struggling to regain your senses. The left side of your face is numb while the " << endl
		 << "right side feels burning hot. The shadowy people who kidnapped you don't seem " << endl
		 << "to be around." << endl
		 << endl;

	system("pause");
	system("cls");

	roomSnowyStart();
	//roomGraveStones();
}

//This function gets input from the user and uses it so they can interact with their surroundings. It is called by
//the program at the end of almost every text output the user recieves.
userInput getUserInput()
{
	//This is where we check to see if the player has gained a level based on their XP... if so, level them and return
	playerLevelGain();

	userInput UICommand = {false, "-", "-"}; //init a userInput struct for holding temp user input
	userInput UIFinalCommand = {false, "-", "-"}; //init a userInput struct for holding final user input
	string SUserInput = "-"; //init a temp string for holding the raw user input
	string SUserParsedComm = "-"; //init a string for holding the parsed user input

	if(!bPlayerDead)
	{
	//This is where we get some input from the user and return it as a string
	cout << "What do you do? (type ? for help) =Your Stats= HP: " << Self.iPlayerHP << "/" << Self.iPlayerMaxHP << "  Attack: " << Self.iPlayerAP << "  XP: " << Self.iPlayerXP << "/" << Self.iPlayerNextLevel << endl
		 << ":";

	cin.sync(); //Clears the input buffer, you should ALWAYS use this before getting input
	getline (cin, SUserInput); //get a value from the user

	//send the value the user entered to our parser for examination as well as the struct to capture the results
	UIFinalCommand = parseUserInput(SUserInput, UICommand); 

	return UIFinalCommand;
	}
	else
	{
		UIFinalCommand.bTwoWords = false;
		UIFinalCommand.SSecondWord = "-";
		UIFinalCommand.SFirstWord = "quit";
		return UIFinalCommand;
	}
}

//This function parses user input into one or two words, an action (one of 5 defaults) and the target object (if one exists).
//The function grabs all characters up to the first space, then all characters up to the second space or hard return,
//and returns this data to the calling function. Any input beyond this is ignored.
userInput parseUserInput(string SUserInput, userInput UICommand)
{
	//add a space to the user's input for parsing purposes
	SUserInput += " ";

	//Init an integer to check how many words we've parsed... we want to parse two and ignore anything else
	int iNumberOfWordsParsed = 0;

	//Get the length of the input string so we know how much we're working with
	int iStringLength = SUserInput.length();

	//Init a string to hold temporary parsing info from our string
	string SText = "";

	//We're going to assume we only have one word by default
	UICommand.bTwoWords = false;

	//Start parsing the user's input, grab each character in sequence up to the end of the line
	for(int i=0; i < iStringLength; i++)
	{
		//Returns a substring of the master string starting at i and grabbing 1 character
		if ((SUserInput.substr(i, 1)) == " ") //checks for a space
		{
			//If we find a space, log this as either the first or second word
			if(iNumberOfWordsParsed == 1) //if we've already found the first word
			{
				UICommand.SSecondWord = SText; //save the second word
				UICommand.bTwoWords = true; //tell the program we've captured two words
				SText = ""; //reset SText
				iNumberOfWordsParsed = 2; //say we've found both words
				i = iStringLength; //end the parsing now that we've found two words, no need to continue past that
			}

			if(iNumberOfWordsParsed == 0) //if this is the first space and word we've found
			{
				UICommand.SFirstWord = SText; //save the first word
				SText = ""; //reset SText so we can use it again
				iNumberOfWordsParsed = 1; //tell our loop we've found our first word
			}
		}
		else //If the character being scanned isn't a space, store the next character in the temp string
		{
			SText += SUserInput.substr(i,1); //this temp string records each non space of the user's input as a word for parsing
			//cout << SText;
			//system("pause");
		}
	}

	return UICommand; //return a userInput to the calling function with all the info about the user's input
}

//This function fires every time the program gets new input from the user. If the user has acquired enough experience points
//to reach the next level, it levels them up, increases stats and deducts XP as necessary.
void playerLevelGain()
{
	if(Self.iPlayerXP >= Self.iPlayerNextLevel)
	{
		//level the player up
		cout << "You have become stronger and faster through the combat you've survived." << endl
			 << endl;

		if(Self.iPlayerLevel == 1)
		{
		cout << "- Your maximum HP has increased by 5." << endl
			 << "- Your attack power has increased by 3." << endl
			 << endl;

			 //Increase player stats
			 Self.iPlayerLevel = 2;
			 Self.iPlayerMaxHP += 5; //increase player max HP by 5
			 Self.iPlayerHP += 5; //increase player current HP by 5
			 Self.iPlayerAP += 3; //increase player attack power by 3
			 Self.iPlayerNextLevel = 30; //increase XP required to reach next level
			 Self.iPlayerXP = Self.iPlayerXP - 15; //subtract 15 xp since we hit level 1
		}

		if(Self.iPlayerLevel == 2)
		{
			//were the text adventure to be lengthed and more monsters added, subsequenet
			//levels could be added here and by continuing the ifs. However, that wasn't
			//done for this project because it went far beyond the listed scope.
		}

		cout << "You need " << Self.iPlayerNextLevel << "XP to become stronger." << endl
			 << endl;
		system("pause");
	}
}

//This function displays the command list for the user
void getHelp()
{
	system("cls"); // clear the screen

		    //------This is as far as we can extend a line of text without wrapping--------//
	cout << "------------------------------------HELP--------------------------------------" << endl
	     << endl
		 << "All objects that you may interact with in the world around you are enclosed in " << endl
		 << "brackets, for example, [door]. If you see an object enclosed in brackets, you " << endl
		 << "can interact with it in some way." << endl
		 << endl
		 << "Type any of the following commands to interact with the world:" << endl
		 << endl
		 << "inv - Type this command to list all objects you are carrying." << endl
		 << endl
		 << "look - Type this command by itself to take a look at your surroundings. Type " << endl
		 << "look and the name of an object in your environment to take a closer look at " << endl
		 << "it, for example 'look snow'. You may see details you'd otherwise miss." << endl
		 << endl
		 << "go (north/south/east/west) - Type this command and a compass direction to " << endl
		 << "move through your environment, for example 'go north'. Note that you may " << endl
		 << "not always be able to go in all four directions." << endl
		 << endl
		 <<	"take (object) - Type this command as well as the name of the object you'd " << endl
		 << "like to take to take an object, for example, 'take book'. If you can take " << endl
		 << "the object in question, you will add it to your inventory." << endl
		 << endl;

	system("pause");
	system("cls");

		    //------This is as far as we can extend a line of text without wrapping--------//
    cout << "-----------------------------HELP (continued)-----------------------------" << endl
	     << endl
		 << "use (object) - Type this command and the name of an object to use that object," << endl
		 << "for example, 'use book'. If the object is usable when you type the command, " << endl
		 << "you will use it and take action as appropriate." << endl
		 << endl
		 << "open (object) - Type this command and the name of an object to attempt to open" << endl
		 << "the object, for example, 'open book'. If you are capable of opening the " << endl
		 << "object, you will do so." << endl
		 << endl
		 << "close (object) - Type this command and the name of an object to attempt to " << endl
		 << "close the object, for example, 'close book'. If you are capable of closing " << endl
		 << "the object, you will do so." << endl
		 << endl
		 << "attack (object) - Type this command and the name of an object to attempt to " << endl
		 << "attack that object, for example, 'attack ghost'. If you are capable of " << endl
		 << "attacking that object, you will initiate combat." << endl
		 << endl
		 << "quit - Type this command to quit the game." << endl
		 << endl;
	
	system("pause");

	system("cls");
}

//This function displays the user's inventory, then loads the look command by default to remind them
//of where they are after they have reviewed the items in their possession.
void getInventory()
{
	system("cls"); // clear the screen

		    //------This is as far as we can extend a line of text without wrapping--------//
	cout << "----------------------------------INVENTORY-----------------------------------" << endl
	     << endl
	     << "You are currently carrying the following objects:" << endl
	     << endl;

	if(bHaveBlindfold)
	{
	cout << "[blindfold] - The tip of a [blindfold] made from coarse cloth is jammed into " << endl
		 << "your pocket. A few drops of your blood stain what little is visible." << endl
		 << endl;
	}

	if(bHaveRope)
	{
	cout << "[ropes] - Two long lengths of coarse, thick rope are jammed into your pocket." << endl
		 << "The rope looks strong enough to hold just about anything." << endl
		 << endl;
	}

	if(bHaveKnife)
	{
	cout << "[knife] - You carry a wicked looking metal butcher knife in your right hand. " << endl
		 << " The edge of the blade is stained with a dark, purplish substance." << endl
		 << endl;
	}

	if(bHaveHealthKit)
	{
	cout << "[bandage] - The end of a thick brown bandage sufficient to staunch most small " << endl
		 << "wounds pokes from one of your pockets. It should help if you get injured. " << endl
		 << endl;
	}

	if(bHaveKey)
	{
	cout << "[key] - The small, silver [key] you found inside the dessicated corpse hanging " << endl
		 << "in the front room of the mansion is tucked into your pocket." << endl
		 << endl;
	}

	if(bHaveNote)
	{
		   //------This is as far as we can extend a line of text without wrapping--------//
	cout << "[paper] - Scrawled on the small scrap of paper you found in the throat of " << endl
		 << "the hanging corpse are the words \"You can't hurt her, James. I ate the key.\"" << endl
		 << endl;
	}

	if(!bHaveBlindfold && !bHaveRope && !bHaveKnife && !bHaveHealthKit && !bHaveKey && !bHaveNote)
	{
	cout << "You are not carrying anything at the moment." << endl
		 << endl;
	}

	system("pause");
	system("cls");
}

//This function handles combat between the user and monsters. Combat is based on random numbers which determine whether the player
//and monster hit or missed. Damage done is a hard number based on attack power. If the user loses the battle, the function returns
//false... if the user wins the battle, the function returns true and the monster is vanquished. If the user retreats from 
//combat, the monster's health is restored to full and the player goes back to a safe place in the room where the monster
//is located.
bool doCombat(int iPlayerHP, int iPlayerAP, int iMonsterHP, int iMonsterAP, int iMonsterXP, string sMonsterName, string sMonsterAttack)
{
	int iPlayerChoice = -1; //intialize an integer for validated player choice

	bool bInCombat = true; //put the player in combat

	//Initialize combat variables
	bool bPlayerHit = false;
	bool bRetreated = false;
	bool bMonsterHit = false;
	bool bMonsterDead = false;
	bool bBadInt = true;

	//start combat
	while(bInCombat) //as long as the player is in combat, continue to do the steps in the loop
	{
				//This is the start of our get user input loop
				bBadInt = true; //Use this variable to run the input loop until the user enters good data

				//Enter your code
				//Going to add some error checking via a loop
				while(bBadInt) //run this loop for as long as bBadInt is true
				{
					system("cls"); // clear the screen after each combat round

					//------This is as far as we can extend a line of text without wrapping--------//
					cout << "---------------------------------- COMBAT ----------------------------------" << endl
						<< "You are engaged in combat with " << sMonsterName << "!" << endl
						<< endl
						<< "--Your Stats-- HP: " << iPlayerHP << " Attack: " << iPlayerAP << " XP: " << Self.iPlayerXP << "/" << Self.iPlayerNextLevel << endl
						<< endl
					    << "<< Choose a combat option >>" << endl
					    << "1 - Attack" << endl
					    << "2 - Retreat" << endl
					    << ":";

					//Get a choice from the player
					cin.sync();
					cin >> iPlayerChoice;

					//Tests the input buffer for a valid value
					// True = Bad data (the user entered bad data, so the check for bad data succeeded (true))
					// False = Good data (the user entered good data, so the check for bad data failed (false))
					if(cin.fail())
					{
						cout << "Please enter either 1 or 2." << endl
							 << endl;
						system("pause");
						cin.clear(); //Use this to clear the cin fail flag if it's not an integer so it doesn't crash our switch
					}
					else
					{
						bBadInt = false; //if it's an integer we can safely run the switch, so exit the loop
					}
				}

				//Check the choice to make sure it's valid
				switch(iPlayerChoice)
				{
					case 1: //If the player chose to attack,show them attacking
						cout << "You swing wildly at " << sMonsterName << " ";
						if(!bHaveKnife)
						{
							cout << "with your fists ";
						}
						else
						{
							cout << "with your knife ";
						}
						bPlayerHit = checkAttack(); //see if the player hit with their attack
						break;

					case 2: //If the player wants to retreat, show them retreating
						cout << "You back away in fear, trying to retreat." << endl
							<< endl;
						bRetreated = checkRetreat(); //check to see if they retreated successfully
						break;

					default: //If they entered something wrong, tell them that and loop again
						cout << "Please enter either 1 or 2." << endl
							 << endl;
						system("pause");
						break;
				}

			//Now that the player has made a choice, let's resolve their choice
			//We'll do attacking first
			if(iPlayerChoice == 1) // the player is attacking
			{
				if(bPlayerHit)
				{
					cout << "and hit, doing " << iPlayerAP << " damage!" << endl
						 << endl;

					iMonsterHP = iMonsterHP - iPlayerAP;
				}
				else
				{
					cout << ", but you don't hit anything vital." << endl;
				}

				//Now we'll do the monster's attack and see if it hit
				bMonsterHit = checkMonsterAttack();

				//Resolve the monster's attack against the player
				if(bMonsterHit)
				{
					cout << "Then " << sMonsterName << " " << sMonsterAttack << ". You take " << iMonsterAP << " damage!" << endl
						 << endl;

					iPlayerHP = iPlayerHP - iMonsterAP;
				}
				else
				{
					cout << "Then " << sMonsterName << " tries to hurt you, but you dodge away." << endl
						 << endl;
				}

				system("pause"); //pause so user can read the results of the combat
			}

			//Next, we'll do retreating
			if(iPlayerChoice == 2) // the player is retreating
			{
				 if(bRetreated)
				 {
					cout << "You backpedal madly and manage to escape the monster's reach. It doesn't seem " << endl
						 << "to be able to follow you." << endl
						 << endl;

					 bInCombat = false;
				 }
				 else
				 {
					cout << "You fail to escape, and " << sMonsterName << " " << sMonsterAttack << ". You take "
						 << iMonsterAP << " damage!" << endl
						 << endl;

					iPlayerHP = iPlayerHP - iMonsterAP;
				 }

				 system("pause");
			}

			//In the final section of the combat loop, we'll see if either combatant died.
			if(iPlayerHP <= 0 || iMonsterHP <= 0)
			{
				//check player HP first... if the player and monster die in the same turn, the player still dies
				if(iPlayerHP <=0)
				{
					cout << "You have been slain by " << sMonsterName << "." << endl
						 << endl;

					system("pause");
					bPlayerDead = true;

					bInCombat = false; //exit the combat loop if the player died
				}

				//check monster HP second... this ensures the player is still alive if we get here
				if(iMonsterHP <= 0)
				{
					cout << "You have slain " << sMonsterName << "!" << endl
						 << endl
						 << "You gain " << iMonsterXP << " experience." << endl
						 << endl;

					system("pause");

					bMonsterDead = true; //the monster died
					bInCombat = false; //exit the combat loop if the monster died
				}

			}
	}

	//Take the resolution of the combat and return to the main game loop, if necessary.
	if(bPlayerDead)
	{
		doPlayerDeath();
		return false; //the return statement doesn't matter here, the player is dead
	}
	else
	{
		if(bMonsterDead)
		{
			//Pass results of combat back to player
			Self.iPlayerHP = iPlayerHP;
			Self.iPlayerXP += iMonsterXP;
			return true; //the monster died and the player gained xp
		}
		else
		{
			//Pass results of combat back to player
			Self.iPlayerHP = iPlayerHP;
			return false; //the player didn't die, but neither did the monster
		}
	}
}

//This function checks to see if the player hit with their attack
bool checkAttack()
{
	int iRanNum = -1; //initialize an integer for our random number
	int iSeed = -1; //initalize an integer for our seed

	//srand(time(0); //use this to seed the random number generator with the current time
	iSeed = time(0);
	srand(iSeed);

    //set iRanNum equal to the remainder of a random number (huge) / 10, 
	//then add 1 (0-9 + 1) for a result of 1-10
	iRanNum = ((rand()% 10) + 1);

	//debugging
	//cout << endl << iRanNum << endl << endl;

	if(iRanNum < 5) //40% chance to miss
	{
		return false; //say attack missed
	}
	else //60% chance to hit
	{
		return true; //say attack hit
	}
}

//This function checks to see if the monster hit with their attack
bool checkMonsterAttack()
{
	int iRanNum = -1; //initialize an integer for our random number
	int iSeed = -1; //initalize an integer for our seed

	//srand(time(0); //use this to seed the random number generator with the current time
	iSeed = time(0);
	srand(iSeed+100000);

    //set iRanNum equal to the remainder of a random number (huge) / 10, 
	//then add 1 (0-9 + 1) for a result of 1-10
	iRanNum = ((rand()% 10) + 1);

	//debugging
	//cout << endl << iRanNum << endl << endl;

	if(iRanNum < 7) //60% chance to miss
	{
		return false; //say attack missed
	}
	else //40% chance to hit
	{
		return true; //say attack hit
	}
}

//This function checks to see if the user managed to retreat from combat
bool checkRetreat()
{
	int iRanNum = -1; //initialize an integer for our random number
	int iSeed = -1; //initalize an integer for our seed

	//srand(time(0); //use this to seed the random number generator with the current time
	iSeed = time(0);
	srand(iSeed);

    //set iRanNum equal to the remainder of a random number (huge) / 10, 
	//then add 1 (0-9 + 1) for a result of 1-10
	iRanNum = ((rand()% 10) + 1);

	//debugging
	//cout << endl << iRanNum << endl << endl;

	if(iRanNum < 8) //70% chance to retreat
	{
		return true; //say attack missed
	}
	else //30% chance to fail to retreat
	{
		return false; //say attack hit
	}
}

//----This is a room in our text adventure------------------------------------------------------------//
//This is the room where the player starts out
void roomSnowyStart()
{
	//Init the strings we'll use when working with user input in this room.
	userInput UIFinalCommand = {false, "look", "-"};

	//Init room loop
	bool bInRoom = true; //set this to lock the user in the room until they leave

	//Init a string to hold other rooms reachable from this room
	string sDestination = "-";

	//Init input check
	bool bValidInput = false;

	//Start room loop
	while(bInRoom)
	{
		bValidInput = false;

		//Inventory functions here ---------------------------------------------------------------------------///
		//Room loop results are listed below
		if(UIFinalCommand.SFirstWord == "inv")
		{
			getInventory();
			bValidInput = true;
			UIFinalCommand.bTwoWords = false;
			UIFinalCommand.SFirstWord = "look";
		}
		//Inventory functions end-----------------------------------------------------------------------------///

		//Help functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "?")
		{
			getHelp();
			bValidInput = true;
			UIFinalCommand.bTwoWords = false;
			UIFinalCommand.SFirstWord = "look";
		}
		//Help functions end ---------------------------------------------------------------------------///

		//Look functions here ---------------------------------------------------------------------------//
		if(UIFinalCommand.SFirstWord == "look")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				if(bBlindfolded)
				{
				cout << "The [blindfold] over your eyes shows only dark, and the cold is piercing, like " << endl
					 << "tiny needles digging into your skin." << endl
					 << endl;
				}
				else
				{
				cout << "A white blanket of snow covers the level ground beneath you and the ice- " << endl
					 << "cloaked trees to your [south], [east], and [west]. The sharp edge of a [rock] " << endl
					 << "juts from a patch of snow near your feet." << endl
					 << endl
					 << "To the [north] stands the ruins of what used to be a two story mansion, now " << endl
					 << "nothing more than a desiccated husk. Its dark, empty windows hang open like " << endl
					 << "large, black eyesockets--after the eyes have been ripped out." << endl
					 << endl;
				}

				if(bBound)
				{
				cout << "The wind is howling, and the [ropes] on your wrists are bound so tight your " << endl
					 << "hands have gone almost numb." << endl
					 << endl;
				}

				if(bFoundRock && bBlindfolded)
				{
				cout << "You can feel the edge of a sharp [rock] almost buried in the snow nearby." << endl
					 << endl;
				}

				if(!bHaveBlindfold && !bBlindfolded)
				{
				cout << "The [blindfold] that was over your eyes lies at your feet." << endl
					 << endl;
				}

				if(!bHaveRope && !bBlindfolded)
				{
				cout << "The [ropes] that bound your wrist lie in the snow to your side, their ends " << endl
					 << "frayed from the sharp sawing motion of the [rock]." << endl
					 << endl;
				}

				if(bFrontPorchDoorBanging)
				{
					cout << "BANG!" << endl
						<< "Another loud crack echoes through the night. ";

					if(!bBlindfolded)
					{
					cout << "It\'s coming from the mansion to the [north].";
					}
				}

				cout << endl << endl;

				bValidInput = true;
			}
			else //if the user entered two words
			{
				//Handle looking at the blindfold
				if(UIFinalCommand.SSecondWord == "blindfold")
				{

					bValidInput = true;
					
					if(bBlindfolded)
					{
							    //------This is as far as we can extend a line of text without wrapping--------//
						cout << "You can't see anything through your [blindfold], but it feels like tight, wet " << endl
							 << "cloth." <<endl
							 << endl;
					}
					else
					{
						if(!bHaveBlindfold)
						{
								     //------This is as far as we can extend a line of text without wrapping--------//
							cout << "A discarded [blindfold] lies on the ground, barely visible in the snow. " << endl
								 << endl;
						}
						else
						{
							cout << "The [blindfold] that was around your eyes is now tucked in your pocket." << endl
								 << endl;
						}
					}

				}

				//Handle looking at the ropes
				if(UIFinalCommand.SSecondWord == "ropes")
				{
					bValidInput = true;

					if(bBound)
					{
							   //------This is as far as we can extend a line of text without wrapping--------//
						cout << "You feel rather than see coarse [ropes] binding your wrists together behind " << endl
							 << "your back, horribly tight. No matter how much you wriggle they won't come " << endl
							 << "off." << endl
							 << endl;
					}
					else
					{
						if(!bHaveRope)
						{
								  //------This is as far as we can extend a line of text without wrapping--------//
							cout << "Some coarse [ropes] lie in the snow, their ends sliced by a sharp edge. " << endl
								 << endl;
						}
						else
						{
								  //------This is as far as we can extend a line of text without wrapping--------//
							cout << "The [ropes] that bound your wrists are now stuffed into your pocket. " << endl
								 << endl;							
						}
					}
				}

				//handle looking at the rock
				if(UIFinalCommand.SSecondWord == "rock")
				{
					bValidInput = true;

					if(bBlindfolded)
					{
							    //------This is as far as we can extend a line of text without wrapping--------//
						cout << "Though you can't see anything through your [blindfold], feeling around in the " << endl
							 << "snow beneath you soon reveals a hard [rock] with a sharp edge." <<endl
							 << endl;
					}
					else
					{
							    //------This is as far as we can extend a line of text without wrapping--------//
						cout << "The tip of a gray [rock] juts from the snow like a sawblade, its sharp edge " << endl
							 << "glistening with fresh ice." <<endl
							 << endl;
					}
				}
			}
		}
		//Look functions end ---------------------------------------------------------------------------//

		//Go functions here ---------------------------------------------------------------------------//
		if(UIFinalCommand.SFirstWord == "go")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to go somewhere, you\'d need to choose a direction. " << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				if(bBound)
				{
					if(UIFinalCommand.SSecondWord == "north" || 
					UIFinalCommand.SSecondWord == "east" ||
					UIFinalCommand.SSecondWord == "south" ||
					UIFinalCommand.SSecondWord == "west")
					{	
					           //------This is as far as we can extend a line of text without wrapping--------//
						cout << "You wriggle through the snow, hoping to find some way free of the freezing " << endl
							 << "wet that surrounds you, but you don\'t make much progress. However, you do " << endl
							 << "feel something poking into your side. Further inspection reveals a [rock] " << endl
							 << "with an almost razor sharp edge." << endl
							 << endl;

						bFoundRock = true;
						bValidInput = true;
					}
				}
				else
				{
					if(UIFinalCommand.SSecondWord == "north")
					{
					           //------This is as far as we can extend a line of text without wrapping--------//

						bValidInput = true;
						sDestination = "FrontPorch";
						bInRoom = false;
					}

					if(UIFinalCommand.SSecondWord == "east" ||
					   UIFinalCommand.SSecondWord == "south" ||
					   UIFinalCommand.SSecondWord == "west")
					{
					           //------This is as far as we can extend a line of text without wrapping--------//
						cout << "You stumble into the trees, but find no visible path. It\'s dark and the " << endl
							 << "ice-covered branches lock close together, blocking your progress at every " << endl
							 << "turn. Any attempt to progress through snaps back the branches and showers " << endl
							 << "you with sharp bits of ice. It\'s simply impassible, and you are eventually " << endl
							 << "forced to return to your starting point." << endl
							 << endl;

						bValidInput = true;					
					}
				}
			}
		}
		//Go functions end ---------------------------------------------------------------------------///

		//Take functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "take")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to take something, you\'d need to choose an object you want to take." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
					if(UIFinalCommand.SSecondWord == "blindfold")
					{
						bValidInput = true;

						if(bBlindfolded)
						{
							         //------This is as far as we can extend a line of text without wrapping--------//
							cout << "You can't reach your [blindfold]--your hands are bound with tight [ropes]." << endl
								 << endl;
						}
						else
						{
							if(bHaveBlindfold)
							{
										//------This is as far as we can extend a line of text without wrapping--------//
								cout << "You already have a [blindfold]. It\'s jutting out of your pocket." << endl
									 << endl;
							}
							else
							{
										//------This is as far as we can extend a line of text without wrapping--------//
								cout << "You lean down and pick up the [blindfold] from where it fell to the snow. The " << endl
									 << "cloth is rough, cold, and completely opaque. A few drops of blood stain the " << endl
									 << "fabric. You grimace as you realize those stains likely came from the cut " << endl
									 << "gashed into your head by the shadowy figure that hit you over the head." << endl
									 << endl
									 << "You tuck the long strip of fabric into the pocket of your jeans." << endl
									 << endl;

								bHaveBlindfold = true; //add the blindfold to the user's inventory
							}
						}
						
					}				

					if(UIFinalCommand.SSecondWord == "ropes")
					{
						bValidInput = true;

						if(bBlindfolded)
						{
							         //------This is as far as we can extend a line of text without wrapping--------//
							cout << "Try as you might, you can't seem to wriggle your wrists out of the tight " << endl
								 << "[ropes] that bind them together." << endl
								 << endl;
						}
						else
						{
							if(bHaveRope)
							{
										//------This is as far as we can extend a line of text without wrapping--------//
								cout << "You already have some [ropes]. A couple of lengths of rope with sawed off ends " << endl
									 << "jut from the pocket of your jeans." << endl
									 << endl;
							}
							else
							{
										//------This is as far as we can extend a line of text without wrapping--------//
								cout << "You kneel in the snow and pick up the [ropes] from where you left them on the " << endl
									 << "ground. The thick rope looks strong enough to pull just about anything.  " << endl
									 << endl
									 << "You cram the [ropes] into the pocket of your jeans as best you can." << endl
									 << endl;

								bHaveRope = true; //add the rope to the user's inventory
							}
						}
					}

					if(UIFinalCommand.SSecondWord == "rock")
					{
						bValidInput = true;

						if(bBlindfolded)
						{
							         //------This is as far as we can extend a line of text without wrapping--------//
							cout << "Though you feel a large, sharp [rock] jutting from the ground nearby, it\'s " << endl
								 << "far too heavy for you to move. You might be able to use it where it is now, " << endl
								 << "however." << endl
								 << endl;
						}
						else
						{
							cout << "Though you see the edge of a sharp [rock] jutting from the snow, a quick " << endl
								 << "inspection assures you the [rock] itself is far too big for you to carry." << endl
								 << endl;
						}
					}

					if(!bValidInput)
					{
						cout << "You don't see anything like that around here." << endl
						     << endl;

						bValidInput = true;
					}
			}
		}
		//Take functions end ---------------------------------------------------------------------------///

		//Use functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "use")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to use something, you\'d need to name the object you want to use." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				if(UIFinalCommand.SSecondWord == "rock")
				{
					bValidInput = true;

					if(bBlindfolded)
					{
					             //------This is as far as we can extend a line of text without wrapping--------//
						cout << "You press your back and hands against the sharp edge of the [rock], wincing as " << endl
							 << "the sharp stone grazes your tender flesh. Gritting your teeth with effort, you " << endl
							 << "begin to saw your [ropes] back and forth across the edge. The sound of fibers " << endl
							 << "snapping lends strength to your efforts, and then, with a great SNAP, the " << endl
							 << "[ropes] that bound your hands burst off." << endl
							 << endl
							 << "Anxious to see where your shadowy kidnappers have left you, you jump to your " << endl
							 << "feet and rip off your [blindfold], tossing it to the ground at your feet." << endl
							 << "Your efforts reveal a star-filled night sky and blankets of snow lit by a " << endl
							 << "white moon. Snow flurries drift gently to the ground around you, and the cold " << endl
							 << "stabs your flesh like tiny needles. Your teeth chatter as your breath mists " << endl
							 << "before your eyes." << endl
							 << endl
							 << "Where in all creation did your kidnappers drop you off?" << endl
							 << endl
							 << "You glance once more at the [blindfold] and [ropes] at your feet, and ponder " << endl
							 << "taking them with you as evidence of your kidnapping. If you get free of this " << endl
							 << "place, SOMEONE is going to have to pay." << endl
							 << endl;

						bBound = false;
						bBlindfolded = false;
					}
					else
					{
					             //------This is as far as we can extend a line of text without wrapping--------//
						cout << "With your wrists free and your blindfold removed, you don't see any further " << endl
							 << "use for the large [rock]." << endl
							 << endl;
					}
				}

				if(UIFinalCommand.SSecondWord == "bandage" && bHaveHealthKit)
				{
					bValidInput = true;

					if(Self.iPlayerHP < Self.iPlayerMaxHP)
					{
						cout << "You press the bandage to one of your cuts, anxious to stop the bleeding. " << endl
							 << "Though it\'s not a permanent fix, you think the bandage will hold for the " << endl
							 << "time being." << endl
							 << endl
							 << "You gain " << iHealthKitHP << " HP." << endl
							 << endl;

						Self.iPlayerHP += iHealthKitHP;

						//Error check to make sure the player doesn't exceed their max HP
						if(Self.iPlayerHP > Self.iPlayerMaxHP) //if bandage puts player over their max HP...
						{
							Self.iPlayerHP = Self.iPlayerMaxHP; //reset their HP to correct full number
						}

						bHaveHealthKit = false;
					}
					else
					{
						cout << "You see no need for the [bandage]. You aren't bleeding." << endl
							 << endl;
					}
				}

				if(!bValidInput)
				{
					cout << "You're not sure how to go about using that at the moment." << endl
						 << endl;

					bValidInput = true;
				}
			}
		}
		//Use functions end ---------------------------------------------------------------------------///

		//Open functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "open")
		{
			cout << "There's nothing you can open in this place. ";

			if(bBound)
			{
				cout << "You'd need to use something to " << endl
					 << "remove your [ropes].";
			}

			cout << endl << endl;

			bValidInput = true;
		}
		//Open functions end ---------------------------------------------------------------------------///

		//Close functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "close")
		{
			cout << "There's nothing you can close in this place." << endl
			<< endl; 

			bValidInput = true;
		}
		//Close functions end ---------------------------------------------------------------------------///

		//Attack functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "attack")
		{
			cout << "There's nothing you can attack right now." << endl
				 << endl;

			bValidInput = true;
		}
		//Attack functions end ---------------------------------------------------------------------------///

		//Quit functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "quit")
		{
			cout << "You are exiting the game." << endl;
			system("pause");
			bInRoom = false;
		}
		//Quit functions here ---------------------------------------------------------------------------///	

		//Error catch all functions below ---------------------------------------------------------------------------///
		if(!bValidInput)
		{
			cout << "The cold must be getting to you. You're not making sense." << endl
			     << endl;
		}

		//reprompt user
		if(bInRoom)
		{
			UIFinalCommand = getUserInput();
			system("cls");
		}
	}

	//Upon exiting the room, send the user to a new destination.
	if(sDestination == "FrontPorch")
	{
		roomFrontPorch();
	}
}


//----This is a room in our text adventure------------------------------------------------------------//

//----This is a room in our text adventure------------------------------------------------------------//
void roomFrontPorch()
{
	//Init the strings we'll use when working with user input in this room.
	userInput UIFinalCommand = {false, "look", "-"};

	//Init room loop
	bool bInRoom = true; //set this to lock the user in the room until they leave
	bool bArrivedAtRoom = false; //set this to list the room entry text the first time look is called.

	//Init a string to hold other rooms reachable from this room
	string sDestination = "-";

	//Init input check
	bool bValidInput = false;

	//Start room loop
	while(bInRoom)
	{
		bValidInput = false;

		//Inventory functions here ---------------------------------------------------------------------------///
		//Room loop results are listed below
		if(UIFinalCommand.SFirstWord == "inv")
		{
			getInventory();
			bValidInput = true;
			UIFinalCommand.bTwoWords = false;
			UIFinalCommand.SFirstWord = "look";
		}
		//Inventory functions end-----------------------------------------------------------------------------///

		//Help functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "?")
		{
			getHelp();
			bValidInput = true;
			UIFinalCommand.bTwoWords = false;
			UIFinalCommand.SFirstWord = "look";
		}
		//Help functions end ---------------------------------------------------------------------------///

		//Look functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "look")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				if(bFrontPorchFirstLook)
				{
				cout << "BANG!" << endl
					 << endl
					 << "The door of the house hangs ajar, swinging back and forth in the wind, flying " << endl
					 << "open with each gust only to bounce back on its hinges and slam into the frame." << endl
					 << "The sound of each collision is loud, almost angry, like a child throwing a " << endl
					 << "tantrum after being left alone for too long." << endl
					 << endl;

				bFrontPorchFirstLook = false;
				}

				if(!bArrivedAtRoom)
				{
				cout << "You step onto a large wooden porch, the planks creaking ominously beneath " << endl
					 << "your weight." << endl
					 << endl;

				bArrivedAtRoom = true;
				}
				else
				{
				cout << "You are standing on a large wooden porch. The planks shift beneath your " << endl
					 << "weight with every movement, creaking ominously." << endl
					 << endl;
				}

					   //------This is as far as we can extend a line of text without wrapping--------//
				cout << "The porch appears to be slowly rotting, through the roof that covers it has " << endl
					 << "kept the planks from freezing. The ruins of a shattered rocking chair are " << endl
					 << "piled beneath one of the empty windows. The chair looks like it was hacked " << endl
					 << "apart with an axe." << endl
					 << endl;

				if(bFrontPorchDoorBanging)
				{
				cout << "The wooden front [door] of the mansion is to your [north], swinging open " << endl
					 << "every few seconds before slamming shut with a loud BANG!" << endl
					 << endl;
				}
				else
				{
				cout << "The closed wooden front [door] of the mansion is to your [north], " << endl
					 << "trembling with barely restrained violence in the stiff wind." << endl
					 << endl;
				}

				cout << "It looks like the porch continues around the side of the house to " << endl
					 << "the [east] and [west]. To your [south] are stairs leading back into the snow." << endl
					 << endl;

				bValidInput = true;
			}
			else //if the user entered two words
			{
				//Handle looking at the front door
				if(UIFinalCommand.SSecondWord == "door")
				{

					bValidInput = true;
					
					if(bFrontPorchDoorBanging)
					{
							    //------This is as far as we can extend a line of text without wrapping--------//
						cout << "The thin wooden [door] of the mansion is swinging wildly back and forth in " << endl
							 << "the wind, flying fully open before slamming violently closed against its " <<endl
							 << "frame with a loud BANG. Even though you know the door is simply moving " << endl
							 << "through natural forces, the way it opens and slams looks almost--angry." << endl
							 << endl;
					}
					else
					{
						cout << "The thin wooden [door] of the mansion is trembling violently against its " << endl
							 << "doorframe as the wind blows over it, vainly trying to suck it back open. " << endl
							 << "Though you know it\'s only a trick of the wind, the way the door trembles " << endl
							 << "and strains almost reminds you of a vicious beast slamming itself into the " << endl
							 << "bars of its cage." << endl
							 << endl;
					}
				}
			}
		}
		//Look functions end ---------------------------------------------------------------------------///

		//Go functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "go")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to go somewhere, you\'d need to choose a direction. " << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				if(UIFinalCommand.SSecondWord == "north")
				{
					bValidInput = true;

					if(bFrontPorchDoorBanging)
					{
							//------This is as far as we can extend a line of text without wrapping--------//
						cout << "You push open the violently swinging [door] and stumble into the mansion's " << endl
							<< "shadowed interior." << endl
							<< endl;

						bInRoom = false;

						sDestination = "FrontRoom";
					}
					else
					{
						cout << "You can't go that way. The front [door] of the mansion is currently shut, " << endl
							 << "though it quivers violently as the wind tries to rip it open again." << endl
							 << endl;
					}
				}

				if(UIFinalCommand.SSecondWord == "east")
				{
					bValidInput = true;

						//------This is as far as we can extend a line of text without wrapping--------//
					cout << "You make your way around the side of the house, passing thick glass " << endl
						 << "windows stained with brown gunk and covered in thin sheets of ice. You " << endl
						 << "can't see anything through the glass." << endl
						 << endl;

					bInRoom = false;

					sDestination = "BackPorch";
				}

				if(UIFinalCommand.SSecondWord == "west")
				{
					bValidInput = true;

						//------This is as far as we can extend a line of text without wrapping--------//
					cout << "You make your way around the side of the house, passing thick glass " << endl
						 << "windows stained with brown gunk and covered in thin sheets of ice. You " << endl
						 << "can't see anything through the glass." << endl
						 << endl;

					bInRoom = false;

					sDestination = "BackPorch";
				}

				if(UIFinalCommand.SSecondWord == "south")
				{
					bValidInput = true;

						//------This is as far as we can extend a line of text without wrapping--------//
					cout << "You trudge back down the steps onto the snow-blanked ground outside the " << endl
						 << "mansion, heading for the distant clustered trees. You stop at the point " << endl
						 << "where the sound of the slamming door first woke you, glancing around." << endl
						 << endl;

					bInRoom = false;

					sDestination = "SnowyStart";
				}
			}
		}
		//Go functions end ---------------------------------------------------------------------------///

		//Take functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "take")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to take something, you\'d need to choose an object you want to take." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
					if(UIFinalCommand.SSecondWord == "door")
					{
						bValidInput = true;

							         //------This is as far as we can extend a line of text without wrapping--------//
							cout << "The [door] is firmly attached to its frame, and far too large for you to take." << endl
								 << endl;
					}

					if(!bValidInput)
					{
						cout << "You don't see anything like that around here." << endl
						     << endl;

						bValidInput = true;
					}
			}
		}
		//Take functions end ---------------------------------------------------------------------------///

		//Use functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "use")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to use something, you\'d need to name the object you want to use." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				if(UIFinalCommand.SSecondWord == "ropes" && bHaveRope)
				{
					       //------This is as far as we can extend a line of text without wrapping--------//
					cout << "Frowning at the noise, you attempt to lash the door shut with the [ropes]. " << endl
						 << "However, the slick and cold door handle slips the [ropes] as easily as if it " << endl
						 << "were covered in ice. Defeated, you pick up the [ropes] and cram them back " << endl
						 << "into your pocket." << endl
						 << endl;

					bValidInput = true;
				}

				if(UIFinalCommand.SSecondWord == "bandage" && bHaveHealthKit)
				{
					bValidInput = true;

					if(Self.iPlayerHP < Self.iPlayerMaxHP)
					{
						cout << "You press the bandage to one of your cuts, anxious to stop the bleeding. " << endl
							 << "Though it\'s not a permanent fix, you think the bandage will hold for the " << endl
							 << "time being." << endl
							 << endl
							 << "You gain " << iHealthKitHP << " HP." << endl
							 << endl;

						Self.iPlayerHP += iHealthKitHP;

						//Error check to make sure the player doesn't exceed their max HP
						if(Self.iPlayerHP > Self.iPlayerMaxHP) //if bandage puts player over their max HP...
						{
							Self.iPlayerHP = Self.iPlayerMaxHP; //reset their HP to correct full number
						}

						bHaveHealthKit = false;
					}
					else
					{
						cout << "You see no need for the [bandage]. You aren't bleeding." << endl
							 << endl;
					}
				}

				if(!bValidInput)
				{
					cout << "You're not sure how to go about using that at the moment." << endl
						 << endl;

					bValidInput = true;
				}
			}
		}
		//Use functions end ---------------------------------------------------------------------------///

		//Open functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "open")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to open something, you\'d need to name the object you want to open." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				if(UIFinalCommand.SSecondWord == "door")
				{
					if(bFrontPorchDoorBanging)
					{
					           //------This is as far as we can extend a line of text without wrapping--------//
						cout << "The [door] is swinging violently open and closed, straining at its frame." << endl
							 << "You grasp the wildly swinging [door] by its metal handle and manage to stop " << endl
							 << "its wild slamming. However, the door handle is icy cold, and you soon " << endl
							 << "release the door handle, rubbing your cold palm with your other hand. " << endl
							 << "Freed of any restraint, the [door] resumes its loud, repeated slams." << endl
							 << endl;
						
						bValidInput = true;
					}
					else
					{
					            //------This is as far as we can extend a line of text without wrapping--------//
						cout << "You grip the cold handle of the trembling closed [door] and give it a firm " << endl
							 << "turn. With a quiet crack, the [door] snaps open. The wind battering the porch " << endl
							 << "rips it out of your hand before you can do anything else, and the [door] then " << endl
							 << "resumes it\'s violent swinging motions." << endl
							 << endl;

						bFrontPorchDoorBanging = true;
				        bValidInput = true;
					}
				}
			}
		}
		//Open functions end ---------------------------------------------------------------------------///

		//Close functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "close")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to close something, you\'d need to name the object you want to close." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				if(UIFinalCommand.SSecondWord == "door")
				{
					if(bFrontPorchDoorBanging)
					{
					           //------This is as far as we can extend a line of text without wrapping--------//
						cout << "The [door] is swinging violently open and closed, straining at its frame." << endl
							 << "You grasp the wildly swinging [door] by its metal handle and manage to stop " << endl
							 << "its wild slamming. Straining with the effort of fighting the vicious wind " << endl
							 << "battering both the porch and the [door], you force it into its frame and " << endl
							 << "press hard until you hear the dull click of the bolt slamming home. " << endl
							 << endl
							 << "You step back from the now closed [door]. It trembles with barely restrained " << endl
							 << "violence, as if longing to tear itself open again." << endl
							 << endl;
						
						bFrontPorchDoorBanging = false;
						bValidInput = true;
					}
					else
					{
					            //------This is as far as we can extend a line of text without wrapping--------//
						cout << "The wooden, trembling front [door] is already closed." << endl
							 << endl;

				        bValidInput = true;
					}
				}
			}
		}
		//Close functions end ---------------------------------------------------------------------------///

		//Attack functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "attack")
		{
			cout << "There's nothing you can attack right now." << endl
				 << endl;

			bValidInput = true;
		}
		//Attack functions end ---------------------------------------------------------------------------///

		//Quit functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "quit")
		{
			cout << "You are exiting the game." << endl;
			system("pause");
			bInRoom = false;
		}
		//Quit functions here ---------------------------------------------------------------------------///	

		//Error catch all functions below ---------------------------------------------------------------------------///
		if(!bValidInput)
		{
			cout << "The cold must be getting to you. You're not making sense." << endl
			     << endl;
		}

		//reprompt user
		if(bInRoom)
		{
			UIFinalCommand = getUserInput();
			system("cls");
		}
	}

	//Upon exiting the room, send the user to a new destination.
	if(sDestination == "SnowyStart")
	{
		roomSnowyStart();
	}

	if(sDestination == "BackPorch")
	{
		roomBackPorch();
	}

	if(sDestination == "FrontRoom")
	{
		roomFrontRoom();
	}
}
//----This is a room in our text adventure------------------------------------------------------------//

//----This is a room in our text adventure------------------------------------------------------------//
void roomBackPorch()
{
	//Init the strings we'll use when working with user input in this room.
	userInput UIFinalCommand = {false, "look", "-"};

	//Init room loop
	bool bInRoom = true; //set this to lock the user in the room until they leave
	bool bArrivedAtRoom = true; //set this to alter the text based on if the user is arriving

	//Init a string to hold other rooms reachable from this room
	string sDestination = "-";

	//Init input check
	bool bValidInput = false;

	//Start room loop
	while(bInRoom)
	{
		bValidInput = false;

		//Inventory functions here ---------------------------------------------------------------------------///
		//Room loop results are listed below
		if(UIFinalCommand.SFirstWord == "inv")
		{
			getInventory();
			bValidInput = true;
			UIFinalCommand.bTwoWords = false;
			UIFinalCommand.SFirstWord = "look";
		}
		//Inventory functions end-----------------------------------------------------------------------------///

		//Help functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "?")
		{
			getHelp();
			bValidInput = true;
			UIFinalCommand.bTwoWords = false;
			UIFinalCommand.SFirstWord = "look";
		}
		//Help functions end ---------------------------------------------------------------------------///

		//Look functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "look")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				if(bArrivedAtRoom)
				{
				cout << "You step onto a small back porch. Like the front, the planks are rotting " << endl
					 << "and feel like they might break away beneath you at any moment." << endl
				     << endl;

				bArrivedAtRoom = false;

				}
				else
				{
				cout << "You're standing on a small back porch. Like the front, the planks are rotting " << endl
					 << "and feel like they might break away beneath you at any moment." << endl
				     << endl;
				}

			    if(!bBackPorchDoorOpen)
				{
				cout << "To the [south], at the back of the house, is a small [door], tightly closed." << endl
					 << endl;

				}
				else
				{
				cout << "To the [south], at the back of the house, is a small [door], slightly ajar." << endl
					 << endl;

				}

				if(!bBackPorchFoundGravestones)
				{
				cout << "To the [north] is more frozen forest, ice-cloaked and impassible. You can " << endl
					 << "barely make out some small, black [shapes] huddled just inside the distant " << endl
					 << "trees. They aren't moving." << endl
					 << endl;
				}
				else
				{
				cout << "To the [north] is more frozen forest, ice-cloaked and impassible. You can " << endl
					 << "barely make out the shadows of three [gravestones] just inside the tree line." << endl
					 << endl;
				}

				cout << "The porch leads away to the [east] and [west], offering a path back to the " << endl
					 << "front porch." << endl
					 << endl;

				bValidInput = true;
			}
			else //if the user entered two words
			{
				//Handle looking at the front door
				if(UIFinalCommand.SSecondWord == "door")
				{

					bValidInput = true;
					
					if(bBackPorchDoorOpen)
					{
							    //------This is as far as we can extend a line of text without wrapping--------//
						cout << "The small wooden [door] at the back of the house hangs slightly ajar, and " << endl
							 << "warm air hisses out through the crack between door and frame, misting in " << endl
							 << "the freezing night air. When you look closely, you see a few words carved " << endl
							 << "into the door with what was probably a knife. Though the carving is worn and " << endl
							 << "awkward, you think it might say \"James + Lisa 4EVR\"." << endl
							 << endl;
					}
					else
					{
						cout << "The small wooden [door] at the back of the house is tightly shut. When you " << endl
							 << "look closely, you see a few words carved into the door with what was " << endl
							 << "probably a knife. Though the carving is worn and awkward, you think it might " << endl
							 << "say \"James + Lisa 4EVR\"." << endl
							 << endl;
					}
				}

				if(UIFinalCommand.SSecondWord == "shapes" || UIFinalCommand.SSecondWord == "gravestones")
				{
					bValidInput = true;

					if(!bBackPorchFoundGravestones)
					{
							//------This is as far as we can extend a line of text without wrapping--------//
						cout << "Huddled on the back porch and hugging yourself against the chill wind, you " << endl
							<< "stare at the distant, huddled [shapes] until your straining eyes finally " << endl
							<< "recognize them as blocks of stone imbedded in the earth, not people. You " << endl
							<< "shiver deeply, both from the cold and the realization that you are staring " << endl
							<< "at a trio of [gravestones], rising from the earth to the [north]." << endl
							<< endl;

						bBackPorchFoundGravestones = true;
					}
					else
					{
							//------This is as far as we can extend a line of text without wrapping--------//
						cout << "The outline of the three [gravestones] is evident to your eyes now that " << endl
							<< "you've discovered their purpose, rising from the frozen earth to the " << endl
							<< "[north]. You can't make out any other details from the back porch." << endl
							<< endl;
					}

				}
			}
		}
		//Look functions end ---------------------------------------------------------------------------///

		//Go functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "go")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to go somewhere, you\'d need to choose a direction. " << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				if(UIFinalCommand.SSecondWord == "north")
				{
					bValidInput = true;

					cout << "Hugging yourself against the cold, you trudge off the back porch and " << endl
						 << "approach the line of frozen trees to the [north]." << endl
						 << endl;

					sDestination = "GraveStones";
					bBackPorchFoundGravestones = true;

					bInRoom = false;
				}

				if(UIFinalCommand.SSecondWord == "east")
				{
					bValidInput = true;

						//------This is as far as we can extend a line of text without wrapping--------//
					cout << "You make your way around the side of the house, passing thick glass " << endl
						 << "windows stained with brown gunk and covered in thin sheets of ice. You " << endl
						 << "can't see anything through the glass." << endl
						 << endl;

					bInRoom = false;

					sDestination = "FrontPorch";
				}

				if(UIFinalCommand.SSecondWord == "west")
				{
					bValidInput = true;

						//------This is as far as we can extend a line of text without wrapping--------//
					cout << "You make your way around the side of the house, passing thick glass " << endl
						 << "windows stained with brown gunk and covered in thin sheets of ice. You " << endl
						 << "can't see anything through the glass." << endl
						 << endl;

					bInRoom = false;

					sDestination = "FrontPorch";
				}

				if(UIFinalCommand.SSecondWord == "south")
				{
					bValidInput = true;

					if(bBackPorchDoorOpen)
					{
							//------This is as far as we can extend a line of text without wrapping--------//
						cout << "You push open the unlocked [door] and step into the kitchen beyond. The " << endl
							<< "kitchen is unnaturally hot, causing sweat to break out on your forehead " << endl
							<< "the moment you step inside." << endl
							<< endl;

						bInRoom = false;

						sDestination = "Kitchen";
					}
					else
					{
						cout << "You can't go that way. The small wooden [door] to the [south] is tightly " << endl
							 << "shut." << endl
							 << endl;
					}
				}
			}
		}
		//Go functions end ---------------------------------------------------------------------------///

		//Take functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "take")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to take something, you\'d need to choose an object you want to take." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
					if(UIFinalCommand.SSecondWord == "door")
					{
						bValidInput = true;

							         //------This is as far as we can extend a line of text without wrapping--------//
							cout << "The [door] is firmly attached to its frame, and far too large for you to take." << endl
								 << endl;
					}

					if(!bValidInput)
					{
						cout << "You don't see anything like that around here." << endl
						     << endl;

						bValidInput = true;
					}
			}
		}
		//Take functions end ---------------------------------------------------------------------------///

		//Use functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "use")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to use something, you\'d need to name the object you want to use." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{

				if(UIFinalCommand.SSecondWord == "bandage" && bHaveHealthKit)
				{
					bValidInput = true;

					if(Self.iPlayerHP < Self.iPlayerMaxHP)
					{
						cout << "You press the bandage to one of your cuts, anxious to stop the bleeding. " << endl
							 << "Though it\'s not a permanent fix, you think the bandage will hold for the " << endl
							 << "time being." << endl
							 << endl
							 << "You gain " << iHealthKitHP << " HP." << endl
							 << endl;

						Self.iPlayerHP += iHealthKitHP;

						//Error check to make sure the player doesn't exceed their max HP
						if(Self.iPlayerHP > Self.iPlayerMaxHP) //if bandage puts player over their max HP...
						{
							Self.iPlayerHP = Self.iPlayerMaxHP; //reset their HP to correct full number
						}

						bHaveHealthKit = false;
					}
					else
					{
						cout << "You see no need for the [bandage]. You aren't bleeding." << endl
							 << endl;
					}
				}
				else
				{
				cout << "You're not sure how to go about using that at the moment." << endl
					 << endl;

				bValidInput = true;
				}
			}
		}
		//Use functions end ---------------------------------------------------------------------------///

		//Open functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "open")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to open something, you\'d need to name the object you want to open." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				if(UIFinalCommand.SSecondWord == "door")
				{
					if(!bBackPorchDoorOpen)
					{
					           //------This is as far as we can extend a line of text without wrapping--------//
						cout << "You take a firm grip on the [door]'s rusted brass handle with both hands and " << endl
							 << "tug as hard as you can, but the [door] won't budge. It seems to be tightly " << endl
							 << "locked from the inside. The [door]'s handle is extremely warm, almost " << endl
							 << "scalding your hands when you touch it. The [door] isn't opening from " << endl
							 << "this side." << endl
							 << endl;
						
						bValidInput = true;
					}
					else
					{
					            //------This is as far as we can extend a line of text without wrapping--------//
						cout << "The small [door] is already open, hanging slightly ajar. Hot air flows from " << endl
							 << "the crack between wood and frame to mist into the freezing night air." << endl
							 << endl;

				        bValidInput = true;
					}
				}
			}
		}
		//Open functions end ---------------------------------------------------------------------------///

		//Close functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "close")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to close something, you\'d need to name the object you want to close." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				if(UIFinalCommand.SSecondWord == "door")
				{
					if(bBackPorchDoorOpen)
					{
					           //------This is as far as we can extend a line of text without wrapping--------//
						cout << "The small [door] is still open, hanging slightly ajar. Hot air flows from " << endl
							 << "the crack between wood and frame to mist into the freezing night air. When " << endl
							 << "you try to close it, however, the [door] resists you, pushing against you " << endl
							 << "as violently as if someone is pushing from the other side. The sound of " << endl
							 << "heavy breathing intensifies from the other side of the door, and the heat " << endl
							 << "seems to get even worse. You can't close it no matter how hard you try." << endl
							 << endl;
						
						bValidInput = true;
					}
					else
					{
					            //------This is as far as we can extend a line of text without wrapping--------//
						cout << "The small back [door] is already tightly closed." << endl
							 << endl;

				        bValidInput = true;
					}
				}
			}
		}
		//Close functions end ---------------------------------------------------------------------------///

		//Attack functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "attack")
		{
			cout << "There's nothing you can attack right now." << endl
				 << endl;

			bValidInput = true;
		}
		//Attack functions end ---------------------------------------------------------------------------///

		//Quit functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "quit")
		{
			cout << "You are exiting the game." << endl;
			system("pause");
			bInRoom = false;
		}
		//Quit functions here ---------------------------------------------------------------------------///	

		//Error catch all functions below ---------------------------------------------------------------------------///
		if(!bValidInput)
		{
			cout << "The cold must be getting to you. You're not making sense." << endl
			     << endl;
		}

		//reprompt user
		if(bInRoom)
		{
			UIFinalCommand = getUserInput();
			system("cls");
		}
	}

	//Upon exiting the room, send the user to a new destination.
	if(sDestination == "FrontPorch")
	{
		roomFrontPorch();
	}

	if(sDestination == "GraveStones")
	{
		roomGraveStones();
	}

	if(sDestination == "Kitchen")
	{
		roomKitchen();
	}
}
//----This is a room in our text adventure------------------------------------------------------------//

//----This is a room in our text adventure------------------------------------------------------------//
void roomGraveStones()
{
	//Init the strings we'll use when working with user input in this room.
	userInput UIFinalCommand = {false, "look", "-"};

	//Init room loop
	bool bInRoom = true; //set this to lock the user in the room until they leave
	bool bArrivedAtRoom = true; //set this to alter the text based on if the user is arriving

	//Init a string to hold other rooms reachable from this room
	string sDestination = "-";

	//Init input check
	bool bValidInput = false;

	//Start room loop
	while(bInRoom)
	{
		bValidInput = false;

		//Inventory functions here ---------------------------------------------------------------------------///
		//Room loop results are listed below
		if(UIFinalCommand.SFirstWord == "inv")
		{
			getInventory();
			bValidInput = true;
			UIFinalCommand.bTwoWords = false;
			UIFinalCommand.SFirstWord = "look";
		}
		//Inventory functions end-----------------------------------------------------------------------------///

		//Help functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "?")
		{
			getHelp();
			bValidInput = true;
			UIFinalCommand.bTwoWords = false;
			UIFinalCommand.SFirstWord = "look";
		}
		//Help functions end ---------------------------------------------------------------------------///

		//Look functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "look")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				if(bArrivedAtRoom)
				{
					cout << "You walk toward the distant tree line, stopping when you reach three snow- " << endl
						<< "topped [gravestones]. You recognize these as the black shapes you couldn't " << endl
						<< "make out earlier. You stare at the things with a mixture of curiosity " << endl
						<< "and dread. Something about the encroaching trees and the shadows they cast " << endl
						<< "across the stones is making your skin crawl." << endl
						<< endl;

					bArrivedAtRoom = false;
				}
				else
				{
					cout << "You're standing just inside the tree line, staring at a line of three snow- " << endl
						<< "topped [gravestones]. Something about the encroaching trees and the shadows " << endl
						<< "they cast across the stones is making your skin crawl." << endl
						<< endl;

					bArrivedAtRoom = false;
				}

				if(!bGhostIsDead && !bDeaditeIsDead && !bBakedManIsDead)
				{
				    cout << "To the [south] is the back of the abandoned mansion. An impassible tree " << endl
					     << "line surrounds you to the [north], [east], and [west]." << endl
						 << endl;
				}

				if(bGhostIsDead && bDeaditeIsDead && bBakedManIsDead)
				{
					cout << "To the [south] is the back of an abandoned mansion. An impassible tree " << endl
						 << "line surrounds you to the [east] and [west], however, all the trees to " << endl
						 << "the [north] have melted away and you see a clear, open path leading to " << endl
						 << "a two-lane road. Maybe there's finally a way out of this cursed place!" << endl
						 << endl;

					bValidInput = true;
				}

				if(bGhostIsDead || bDeaditeIsDead || bBakedManIsDead)
				{
					if(!bValidInput)
					{
					cout << "To the [south] is the back of an abandoned mansion. An impassible tree " << endl
						 << "line surrounds you to the [east] and [west], however, the frozen trees " << endl
						 << "to the north seem to have grown thinner since you last looked. If a " << endl
						 << "few more trees melted away, you might be able to force your way through." << endl
						 << endl;
					}
				}

				if(bGhostHasArrived && !bGhostIsDead)
				{
					cout << "The nothing [shadow] stares balefully at you with its nothing face, " << endl
						 << "hovering directly above the third and smallest of the three " << endl
						 << "[gravestones]. Though it doesn't move toward you, it\'s definately " << endl
						 << "not backing down." << endl
						 << endl;
				}

				bValidInput = true;
			}
			else //if the user entered two words
			{
				//Handle looking at the gravestones
				if(UIFinalCommand.SSecondWord == "gravestones")
				{

					bValidInput = true;
	
					if(!bGhostHasArrived)
					{
						cout << "As you step forward to look closer at the three [gravestones], irrational " << endl
							 << "fear reaches up from deep inside your gut and clenches your throat like a " << endl
							 << "tight fist. Black mist is swirling above the third and smallest stone." << endl
							 << endl
							 << "The ground trembles beneath your feet as the black mist thickens and rises." << endl
							 << "You blink your eyes, almost certain the [gravestones] have started BLEEDING. " << endl
							 << "As you stare in disbelief, a twisted, spectral [shadow] slides free of " << endl
							 << "the black mist. The shape is twisted and hard to define, but its nothing " << endl
							 << "face and nothing eyes threaten terrible vengeance if you venture closer." << endl
							 << endl;

						bGhostHasArrived = true;
					}

					if(!bGhostIsDead)
					{
							    //------This is as far as we can extend a line of text without wrapping--------//
						cout << "The nothing [shadow] stares balefully at you with its nothing face, hovering " << endl
						     << "directly above the third and smallest of the three [gravestones]. It hisses " << endl
						     << "as you try to get closer. As long as the [shadow] is there, you can't get a " << endl
						     << "close look at anything related to the [gravestones]." << endl
							 << endl;
					}
					else
					{
						cout << "You kneel before the three [gravestones], now stained red by the blood that " << endl
							 << "ran down them during your struggle with the viscous [shadow]. Your eyes " << endl
							 << "sweep across the worn, faded writing on each stone from left to right." << endl
							 << endl
							 << "The largest headstone is on the left. The inscription reads: James Morris - " << endl
							 << "Born 1912 - Died 1941 - Beloved Husband. Below that is the short message: \"May" << endl
							 << "he be remembered and judged as the man he was before.\"" << endl
							 << endl;

						if(bBakedManIsDead)
						{
							       //------This is as far as we can extend a line of text without wrapping--------//
							cout << "The headstone marking the grave of James Morris is now covered in thick ice, " << endl
								 << "and more trees to the [north] have mysteriously melted away." << endl
								 << endl;
						}

						system("pause");
						system("cls");

						cout << "The second headstone is in the middle, a bit smaller than the first. The " << endl
							 << "inscription reads: Lisa Morris - Born 1916 - Died 1941 - Devoted Wife. " << endl
							 << "Below that is a longer message: \"May she find her final peace in the arms " << endl
							 << "of our Lord.\"" << endl
							 << endl;

						if(bDeaditeIsDead)
						{
							       //------This is as far as we can extend a line of text without wrapping--------//
							cout << "The headstone marking the grave of Lisa Morris is now covered in thick ice, " << endl
								 << "and more trees to the [north] have mysteriously melted away." << endl
								 << endl;
						}

						system("pause");
						system("cls");

						cout << "The final and smallest headstone is stained with purplish residue from the... " << endl
							 << "thing... you grappled with above the graves. The inscription reads: Cheryl " << endl
							 << "Morris - Born 1935 - Died 1940 - Beloved Child. Below that is the barely " << endl
							 << "legible inscription \"She walks with the angels now.\"" << endl
							 << endl;

						if(bGhostIsDead)
						{
							       //------This is as far as we can extend a line of text without wrapping--------//
							cout << "The rock of Cheryl's headstone is covered in thick, glittering ice. When " << endl
							     << "you look up, you notice that several of frozen trees blocking your way north " << endl
								 << "have mysteriously melted away." << endl
							     << endl;
						}

						if(!bGhostHasPleaded)
						{

							       //------This is as far as we can extend a line of text without wrapping--------//
							cout << "As you kneel before the trio of [gravestones], a tiny voice that sounds " << endl
								 << "almost like a small child whispers in your ear. " << endl
								 << endl
								 << "\"Please free my mommy and daddy. Please...\"" << endl
								 << endl
								 << "The voice trails off as you whip your head around and jump up. No one is " << endl
								 << "visible anywhere around." << endl
								 << endl;

							bGhostHasPleaded = true;
						}
					}
				}
				//Handle looking at the ghost after it appears
				if(UIFinalCommand.SSecondWord == "shadow")
				{
					bValidInput = true;

					if(!bGhostIsDead && bGhostHasArrived)
					{
							    //------This is as far as we can extend a line of text without wrapping--------//
						cout << "The nothing [shadow] stares balefully at you with its nothing face, hovering " << endl
						     << "directly above the third and smallest of the three [gravestones]. It hisses " << endl
						     << "as you try to get closer. As long as the [shadow] is there, you can't get a " << endl
						     << "close look at anything related to the [gravestones]." << endl
							 << endl;
					}
					
					if(bGhostIsDead && bGhostHasArrived)
					{
						cout << "All that remains of the [shadow] is a dark purple stain atop the third and " << endl
							 << "smallest gravestone, running in long purple streaks down the front." << endl
							 << endl;
					}
				}
			}
		}
		//Look functions end ---------------------------------------------------------------------------///

		//Go functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "go")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to go somewhere, you\'d need to choose a direction. " << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				if(UIFinalCommand.SSecondWord == "north")
				{
					if(!bGhostIsDead && !bDeaditeIsDead && !bBakedManIsDead)
					{
						bValidInput = true;

							//------This is as far as we can extend a line of text without wrapping--------//
						cout << "You take one look at the menacing, frozen tree line to the [north] and " << endl
							<< "decide against trying to force your way through it. The jagged icicles " << endl
							<< "dangling from the treachorously thin branches look sharp enough to rend " << endl
							<< "flesh." << endl
							<< endl;
					}

					if(bGhostIsDead && bDeaditeIsDead && bBakedManIsDead)
					{
						cout << "You set off [north] down the open path that now stretches through where " << endl
							 << "once clusters of ice-cloaked trees barred all progress. You don't know " << endl
							 << "what happened to the other trees and don't care... all that matters is " << endl
							 << "reaching the two-lane road ahead and finding someone, anyone to help you " << endl
							 << "and get you out of this cursed place." << endl
							 << endl;
						
						bValidInput = true;

						system("pause");
						system("cls");

						bInRoom = false;

						sDestination = "Road";
					}

					if(bGhostIsDead || bDeaditeIsDead || bBakedManIsDead)
					{
						if(!bValidInput)
						{
							bValidInput = true;

								//------This is as far as we can extend a line of text without wrapping--------//
							cout << "You take another look at the menacing, frozen tree line to the [north]. " << endl
								<< "Oddly enough, it seems less dense than it was before and many of the " << endl
								<< "trees blocking your progress [north] have somehow melted away. If only " << endl
								<< "a few more trees were to melt along with them, you might be able to force " << endl
								<< "your way through." << endl
								<< endl;
						}
					}
				}

				if(UIFinalCommand.SSecondWord == "east" || UIFinalCommand.SSecondWord == "west")
				{
					bValidInput = true;

					      //------This is as far as we can extend a line of text without wrapping--------//
					cout << "You take one look at the menacing, frozen tree line and decide against " << endl
						 << "trying to force your way through it. The jagged icicles dangling from the " << endl
						 << "treachorously thin branches look sharp enough to rend flesh." << endl
						 << endl;
				}

				if(UIFinalCommand.SSecondWord == "south")
				{
					bValidInput = true;

						//------This is as far as we can extend a line of text without wrapping--------//
					cout << "Shivering from cold and your crawling skin, you turn from the trio of " << endl
						 << "[gravestones] and trudge back to the small porch at the back of the " << endl
						 << "mansion." << endl
						 << endl;

					if(bGhostHasArrived && !bGhostIsDead)
					{
						cout << "You feel the eyes of the [shadow] boring into the back of your head as " << endl
							<< "you walk away. When you finally look back, it has vanished into cold air." << endl
							<< endl;
					}

					bInRoom = false;

					sDestination = "BackPorch";
				}
			}
		}
		//Go functions end ---------------------------------------------------------------------------///

		//Take functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "take")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to take something, you\'d need to choose an object you want to take." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
					if(UIFinalCommand.SSecondWord == "gravestones")
					{
						bValidInput = true;

							         //------This is as far as we can extend a line of text without wrapping--------//
							cout << "The [gravestones] are staying where they are. Moving them is not possible." << endl
								 << endl;
					}

					if(UIFinalCommand.SSecondWord == "shadow" && bGhostHasArrived && !bGhostIsDead)
					{
						bValidInput = true;

							         //------This is as far as we can extend a line of text without wrapping--------//
							cout << "The faceless [shadow] hisses angrily as you approach, one shadowy arm raising " << endl
								 << "threateningly. You're not taking it without a fight." << endl
								 << endl;
					}

					if(!bValidInput)
					{
						cout << "You don't see anything like that around here." << endl
						     << endl;

						bValidInput = true;
					}
			}
		}
		//Take functions end ---------------------------------------------------------------------------///

		//Use functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "use")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to use something, you\'d need to name the object you want to use." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				if(UIFinalCommand.SSecondWord == "knife" && bHaveKnife && bGhostHasArrived && !bGhostIsDead)
				{
					cout << "You brandish the [knife] in your right hand, staring at the [shadow]. It " << endl
					     << "doesn't seem impressed." << endl
						 << endl;

					bValidInput = true;
				}	

				if(UIFinalCommand.SSecondWord == "ropes" && bHaveRope && bGhostHasArrived && !bGhostIsDead)
				{
					cout << "You ponder pulling the [ropes] from your pocket and attacking the " << endl
					     << "[shadow] with them, but you doubt you would have any success tying up " << endl
						 << "something that looks so insubstantial." << endl
						 << endl;

					bValidInput = true;
				}	

				if(UIFinalCommand.SSecondWord == "blindfold" && bHaveBlindfold)
				{
					cout << "You don't see how covering your eyes is going to help the situation." << endl
						 << endl;

					bValidInput = true;
				}

				if(UIFinalCommand.SSecondWord == "bandage" && bHaveHealthKit)
				{
					bValidInput = true;

					if(Self.iPlayerHP < Self.iPlayerMaxHP)
					{
						cout << "You press the bandage to one of your cuts, anxious to stop the bleeding. " << endl
							 << "Though it\'s not a permanent fix, you think the bandage will hold for the " << endl
							 << "time being." << endl
							 << endl
							 << "You gain " << iHealthKitHP << " HP." << endl
							 << endl;

						Self.iPlayerHP += iHealthKitHP;

						//Error check to make sure the player doesn't exceed their max HP
						if(Self.iPlayerHP > Self.iPlayerMaxHP) //if bandage puts player over their max HP...
						{
							Self.iPlayerHP = Self.iPlayerMaxHP; //reset their HP to correct full number
						}

						bHaveHealthKit = false;
					}
					else
					{
						cout << "You see no need for the [bandage]. You aren't bleeding." << endl
							 << endl;
					}
				}

				if(!bValidInput)
				{
				cout << "You're not sure how to go about using that at the moment." << endl
					 << endl;
				
				bValidInput = true;
				}
			}
		}
		//Use functions end ---------------------------------------------------------------------------///

		//Open functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "open")
		{
			cout << "There's nothing around that you could open at the moment." << endl
				 << endl;

			bValidInput = true;
		}
		//Open functions end ---------------------------------------------------------------------------///

		//Close functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "close")
		{
			cout << "There's nothing around that you could close at the moment." << endl
				 << endl;

			bValidInput = true;
		}
		//Close functions end ---------------------------------------------------------------------------///

		//Attack functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "attack")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to attack something, you\'d need to name the object you want to " << endl
					 << "attack." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				//Initialize a variable for determining if the player won their combat or not
				bool bWonCombat = false;

				if(UIFinalCommand.SSecondWord == "shadow" && bGhostHasArrived && !bGhostIsDead)
				{
					//Initiate combat
					bWonCombat = doCombat(Self.iPlayerHP, Self.iPlayerAP, Cheryl.iGhostHP, Cheryl.iGhostAP, Cheryl.iGhostXP, Cheryl.sGhostDescription, Cheryl.sGhostAttack);

					if(bWonCombat)
					{
						bGhostIsDead = true;
						bValidInput = true;
					}
					else
					{
						bValidInput = true;
					}
				}
			}

			if(!bValidInput)
			{
				cout << "You don't see anything like that around here." << endl
					 << endl;
			    
				bValidInput = true;
			}
		}
		//Attack functions end ---------------------------------------------------------------------------///

		//Quit functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "quit")
		{
			cout << "You are exiting the game." << endl;
			system("pause");
			bInRoom = false;
		}
		//Quit functions here ---------------------------------------------------------------------------///	

		//Error catch all functions below ---------------------------------------------------------------------------///
		if(!bValidInput)
		{
			cout << "The cold must be getting to you. You're not making sense." << endl
			     << endl;
		}

		//reprompt user
		if(bInRoom)
		{
			UIFinalCommand = getUserInput();
			system("cls");
		}
	}

	//Upon exiting the room, send the user to a new destination.
	if(sDestination == "BackPorch")
	{
		roomBackPorch();
	}

	if(sDestination == "Road")
	{
		roomSnowyRoad();
	}
}
//----This is a room in our text adventure------------------------------------------------------------//

//----This is a room in our text adventure------------------------------------------------------------//
void roomFrontRoom()
{
	//Init the strings we'll use when working with user input in this room.
	userInput UIFinalCommand = {false, "look", "-"};

	//Init the strings we'll use for local user input
	string SUserInput = "-";

	//Init room loop
	bool bInRoom = true; //set this to lock the user in the room until they leave
	bool bArrivedAtRoom = true; //set this to alter the text based on if the user is arriving

	//Init a string to hold other rooms reachable from this room
	string sDestination = "-";

	//Init input check
	bool bValidInput = false;

	//Start room loop
	while(bInRoom)
	{
		bValidInput = false;

		//Inventory functions here ---------------------------------------------------------------------------///
		//Room loop results are listed below
		if(UIFinalCommand.SFirstWord == "inv")
		{
			getInventory();
			bValidInput = true;
			UIFinalCommand.bTwoWords = false;
			UIFinalCommand.SFirstWord = "look";
		}
		//Inventory functions end-----------------------------------------------------------------------------///

		//Help functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "?")
		{
			getHelp();
			bValidInput = true;
			UIFinalCommand.bTwoWords = false;
			UIFinalCommand.SFirstWord = "look";
		}
		//Help functions end ---------------------------------------------------------------------------///

		//Look functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "look")
		{
			system("cls");

			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				if(bArrivedAtRoom)
				{
					cout << "You step into a large front room filled with possibly the worst smell " << endl
						 << "you've ever encountered, a sickly sweet stench like a mixture of rotting " << endl
						 << "fruit and fresh excrement. The smell alone is enough to make you gag, but " << endl
						 << "the thing that's causing it is far, far worse." << endl
						 << endl;

					bArrivedAtRoom = false;
				}
				else
				{
					cout << "You're standing in a large front room reeking of the worst smell you've" << endl
						 << "ever encountered, a sickly sweet stench like a mixture of rotting fruit " << endl
						 << "and fresh excrement. The smell alone is enough to make you gag, but the " << endl
						 << "thing that's causing it is far, far worse." << endl
						 << endl;
				}

				if(!bCorpseOpen)
				{
						//------This is as far as we can extend a line of text without wrapping--------//
					cout << "A rotting, dessicated [corpse] swings almost imperceptibly back and forth, " << endl
						<< "suspended by its neck from a noose of thick rope that someone tied around a " << endl
						<< "high rafter supporting the ceiling." << endl
						<< endl;
				}
				else
				{
						//------This is as far as we can extend a line of text without wrapping--------//
					cout << "A rotting, dessicated [corpse] swings almost imperceptibly back and forth, " << endl
						<< "suspended by its neck from a noose of thick rope that someone tied around a " << endl
						<< "high rafter supporting the ceiling. Brown goo pools beneath the corpse." << endl
						<< endl;
				}

				cout << "The walls of the room itself are covered in dull yellow wallpaper peeling off " << endl
				     << "at every possible point. You see lighter areas in the paper that show where " << endl
					 << "paintings or photos once hung, but any such things are long since gone. With " << endl
					 << "the exception of a worn wooden [hall-tree] beside the front door, the room " << endl
					 << "contains no other furniture and is empty save for the swinging [corpse]." << endl
					 << endl
					 << "A solid wall blocks you in to the [east]. To the [north] are a pair of wooden " << endl
					 << "[double-doors], ";
				
				if(bHallWayDoorClosed)
				{
					cout << "tightly closed. ";
				}
				else
				{
					cout << "hanging open. ";
				}
					
				cout << "The small door to your [west] is covered in " << endl
					 << "wooden planks that were nailed across it in what looks like a desperate " << endl
					 << "attempt to keep someone or SOMETHING from getting out." << endl
					 << endl;

				if(bFrontPorchDoorBanging)
				{
					cout << "To the [south] is the mansion's front [door], still caught in the wind's " << endl
						 << "angry grip and slamming open and shut. That way leads back to the porch." << endl
						 << endl;
				}
				else
				{
					cout << "To the [south] is the mansion's front [door], tightly closed. Every few " << endl
						 << "seconds the whipping wind outside causes it to rattle angrily in its frame." << endl
						 << endl;
				}

				bValidInput = true;
			}
			else //if the user entered two words
			{
				//Handle looking at the key
				if(UIFinalCommand.SSecondWord == "key" && bCorpseOpen)
				{
					if(!bHaveKey)
					{
							   //------This is as far as we can extend a line of text without wrapping--------//
						cout << "A small, silver [key] glistens wetly inside the puddle of brownish red goo " << endl
							 << "dripping from the chest of the [corpse] you split open." << endl
							 << endl;

						bValidInput = true;
					}
					else
					{
						cout << "You already have the [key] you found inside the dessicated [corpse]." << endl
							 << endl;

						bValidInput = true;
					}
				}

				if(UIFinalCommand.SSecondWord == "door")
				{
					bValidInput = true;

					if(bFrontPorchDoorBanging)
					{
							    //------This is as far as we can extend a line of text without wrapping--------//
						cout << "The thin wooden [door] of the mansion is swinging wildly back and forth in " << endl
							 << "the wind, flying fully open before slamming violently closed against its " <<endl
							 << "frame with a loud BANG. Even though you know the door is simply moving " << endl
							 << "through natural forces, the way it opens and slams looks almost--angry." << endl
							 << endl;
					}
					else
					{
						cout << "The thin wooden [door] of the mansion is trembling violently against its " << endl
							 << "doorframe as the wind outside tugs at it, vainly trying to suck it back open. " << endl
							 << "Though you know it\'s only a trick of the wind, the way the door trembles " << endl
							 << "and strains almost reminds you of a vicious beast slamming itself into the " << endl
							 << "bars of its cage." << endl
							 << endl;
					}
				}

				if(UIFinalCommand.SSecondWord == "double-doors")
				{
					bValidInput = true;

					if(bHallWayDoorClosed)
					{
							    //------This is as far as we can extend a line of text without wrapping--------//
						cout <<	"A pair of closed [double-doors] sit on the [north] side of the room, just " << endl
							 << "past the [corpse] swinging from the rafters. The doors are made of dark, " << endl
							 << "thick wood covered in peeling blue paint.  Jagged scratches that look to " << endl
							 << "have been clawed by a wild animal mar both doors, and the thick brass handles " << endl
							 << "are rusted and blackened with age." << endl
							 << endl;
					}
					else
					{
							   //------This is as far as we can extend a line of text without wrapping--------//
						cout <<	"Two wooden [double-doors] hang open at the [north] side of the room, just " << endl
							 << "past the [corpse] swinging from the rafters. The doors are made of dark " << endl
							 << "thick wood covered in peeling blue paint. The inside of each door, facing the " << endl
							 << "hallway, is blistered and blackened as if exposed to an extremely hot flame." << endl
							 << endl;
					}
				}

				if(UIFinalCommand.SSecondWord == "hall-tree")
				{
					if(bFrontRoomDrawerClosed)
					{
					          //------This is as far as we can extend a line of text without wrapping--------//
						cout << "A worn, wooden [hall-tree] stands just beside the mansion's front [door], " << endl
							 << "what was once a fine varnished finish now reduced to a mess of rotting " << endl
							 << "wood. Though the racks that once held coats and umbrellas are empty, " << endl
							 << "you do see a small, closed [drawer] built into its middle." << endl
							 << endl;

						bValidInput = true;
					}
					else
					{
					          //------This is as far as we can extend a line of text without wrapping--------//
						cout << "A worn, wooden [hall-tree] stands just beside the mansion's front [door], " << endl
							 << "what was once a fine varnished finish now reduced to a mess of rotting " << endl
							 << "wood. Though the racks that once held coats and umbrellas are empty, " << endl
							 << "you do see a small, open [drawer] built into its middle." << endl
							 << endl;

						bValidInput = true;
					}
				}

				if(UIFinalCommand.SSecondWord == "corpse")
				{
					cout << "Steeling yourself, your peer closer at the rotting [corpse] swinging in " << endl
				         << "the noose hanging from the ceiling. The [corpse]'s flesh is brownish and " << endl
					     << "wet looking. The rotting remains of what were once its bulging eyes still " << endl
					     << "remain inside its tortured eye sockets, reduced to mushy bags of bloody goo." << endl
					     << "Though the [corpse] is naked and its general shape marks it as once being " << endl
					     << "male, anything that might have testified to that effect long ago fell off " << endl
					     << "or shriveled away to nothing." << endl
					     << endl;

					if(!bHaveNote)
					{
						cout << "The [corpse]'s rotting mouth hangs open far wider than normal, locked " << endl
						     << "at the moment of death in a desperate attempt to scream or breathe. You " << endl
						     << "can just make out a scrap of white [paper] crammed almost all the way " << endl
						     << "down the [corpse]'s throat." << endl
							 << endl;

							bFrontRoomFoundNote = true;
					}
					else
					{
						cout << "The [corpse]'s rotting mouth hangs open far wider than normal, locked " << endl
							 << "at the moment of death in a desperate attempt to scream or breathe." << endl
							 << endl;
					}

					if(bCorpseOpen)
					{
						cout << "The [corpse] has been split open from neck to pelvis by the sharp " << endl
							 << "edge of a blade, and brown goo dribbles from the gaping wound to " << endl
							 << "pool on the floor." << endl
							 << endl;
					}

					if(bCorpseOpen && !bHaveKey)
					{
						cout << "Something shiny glimmers from within the puddle of goo. A closer " << endl
							 << "look reveals it to be a slim silver [key]." << endl
							 << endl;
					}

					bValidInput = true;
				}

				if(UIFinalCommand.SSecondWord == "paper" && bFrontRoomFoundNote)
				{
					if(!bHaveNote)
					{
						cout << "Someone crammed a small scrap of [white] paper into the throat of the " << endl
							<< "[corpse] hanging from the ceiling rafters, but you can't tell if " << endl
							<< "anything is written on it." << endl
							<< endl;

						bValidInput = true;
					}
					else
					{
						cout << "The scrap of [paper] you found crammed down the [corpse]'s throat is " << endl
							 << "already in your possession." << endl
							 << endl;

						bValidInput = true;
					}
				}

				//Handle looking at the drawer
				if(UIFinalCommand.SSecondWord == "drawer")
				{
					if(bFrontRoomDrawerClosed)
					{
					          //------This is as far as we can extend a line of text without wrapping--------//
						cout << "The [drawer] in the [hall-tree] beside the mansion's front [door] is " << endl
							 << "tightly shut." << endl
							 << endl;

						bValidInput = true;
					}
					else
					{
						if(!bHaveKnife)
						{
					               //------This is as far as we can extend a line of text without wrapping--------//
							cout << "When you peer inside the [drawer] you see a rusted butcher [knife] shoved " << endl
								<< "all the way to the back of the [drawer]. Its handle reaches toward you " << endl
								<< "invitingly." << endl
								<< endl;
						}

						if(!bHaveHealthKit && !bFoundFirstHealthKit)
						{
							cout << "A thick brown [bandage] is crammed into a wad at the front of the [drawer], " << endl
								 << "still usable despite its obvious age." << endl
								 << endl;
						}

						cout << "You don't see anything else inside the open [drawer]." << endl
							 << endl;

						bValidInput = true;
					}
				}

				if(UIFinalCommand.SSecondWord == "knife")
				{
					if(!bFrontRoomDrawerClosed && !bHaveKnife)
					{
					           //------This is as far as we can extend a line of text without wrapping--------//
						cout << "A wicked looking butcher [knife] is crammed into the back of the [drawer]." << endl
							 << "Its wooden handle stretches toward you invitingly. You see a number of " << endl
							 << "stains left by a dark, purplish substance all along the cutting edge of the " << endl
							 << "long, rusting blade. Despite the rust, a decent length of sharp metal still " << endl
							 << "shines through." << endl
							 << endl;

						bValidInput = true;
					}
					
					if(!bFrontRoomDrawerClosed && bHaveKnife)
					{
					          //------This is as far as we can extend a line of text without wrapping--------//
						cout << "You already have the [knife] you found in the small [hall-tree] [drawer]." << endl
							 << endl;

						bValidInput = true;
					}
				}

			}
		}
		//Look functions end ---------------------------------------------------------------------------///

		//Go functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "go")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to go somewhere, you\'d need to choose a direction. " << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				if(UIFinalCommand.SSecondWord == "south")
				{
					bValidInput = true;

					if(bFrontPorchDoorBanging)
					{
							//------This is as far as we can extend a line of text without wrapping--------//
						cout << "You push open the wildly swinging front [door] and step back outside." << endl
							 << endl;

						bInRoom = false;

						sDestination = "FrontPorch";
					}
					else
					{
						cout << "You can't go that way. The front [door] is tightly closed." << endl
							 << endl;
					}
				}

				if(UIFinalCommand.SSecondWord == "north")
				{
					bValidInput = true;

					if(bHallWayDoorClosed)
					{
						if(bHallWayDoorLocked)
						{
								//------This is as far as we can extend a line of text without wrapping--------//
							cout << "You tug on the worn brass handles of the [double-doors] leading further " << endl
								<< "into the mansion with no success. They're locked tight, and your " << endl
								<< "efforts to force them open leave you breathing hard as you step away." << endl
								<< endl;
							
							bValidInput = true;
						}
						else
						{
							cout << "You can't go that way. The [double-doors] are shut." << endl
								 << endl;

							bValidInput = true;
						}
					}
					else
					{
						cout << "You step through the open [double-doors] into the dark hallway beyond." << endl
							 << endl;

						bInRoom = false;

						sDestination = "Hallway";
					}
				}

				if(UIFinalCommand.SSecondWord == "east")
				{
					bValidInput = true;

					cout << "You can't go that way. There are no visible doors in the solid wall to " << endl
						 << "your east." << endl
						 << endl;
				}

				if(UIFinalCommand.SSecondWord == "west")
				{
					bValidInput = true;

					cout << "You can't go that way. The small, closed door leading to the west is " << endl
						 << "boarded up as tightly as a tomb. There's no way you're getting through " << endl
						 << "there." << endl
						 << endl;
				}
			}
		}
		//Go functions end ---------------------------------------------------------------------------///

		//Take functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "take")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to take something, you\'d need to choose an object you want to take." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
					if(UIFinalCommand.SSecondWord == "key" && bCorpseOpen)
					{
						if(!bHaveKey)
						{
					               //------This is as far as we can extend a line of text without wrapping--------//
							cout << "You edge closer to the dessicated [corpse] hanging from the ceiling, holding " << endl
								 << "your breath as you reach into the pile of brownish red goo pooling on the " << endl
								 << "floor. The goo is sticky and wet, and it smells like raw sewage. You finally " << endl
								 << "manage to retrieve the small silver [key] from the goo and stumble back from " << endl
								 << "the [corpse] holding back dry heaves. After wiping your goo covered hand on " << endl
								 << "your pants as best you can, you tuck the [key] into one of your pockets." << endl
								 << endl;

							bHaveKey = true;
							bValidInput = true;
						}    
						else
						{
							cout << "You already have the small silver [key] that was inside the [corpse] hanging " << endl
								 << "from the ceiling." << endl
								 << endl;

							bValidInput = true;
						}
					}

					if(UIFinalCommand.SSecondWord == "paper" && bFrontRoomFoundNote)
					{
						if(!bHaveNote)
						{
							cout << "Seeing there's no help for it, you squeeze your eyes shut and gingerly " << endl
								 << "probe the inside of the [corpse]'s mouth with your fingers. Its rotting " << endl
								 << "teeth snap from its decaying gums with a sick squishing sound as you " << endl
								 << "push your fingers in further. You feel slick fluid filling the inside" << endl
								 << "of the mouth and washing over its horribly dry tongue." << endl
								 << endl
								 << "Shaking in disgust, you jam your hand as far as it will go into the " << endl
								 << "[corpse]'s wide open mouth and pluck out the scrap of white [paper]." << endl
								 << endl
								 << "After taking a moment to brush feverishly at the chunks of flesh, blood " << endl
								 << "and teeth caking your hand, you finally recover the presence of mind " << endl
								 << "to look at the scrap of [paper] you retrieved. It\'s scarcely bigger " << endl
								 << "than a small Post-It note, but the words scrawled on it in rough, " << endl
								 << "halting cursive are terse and strange." << endl
								 << endl
								 << "\"You can't hurt her, James,\" the note reads. \"I ate the key.\"" << endl
								 << endl;

								 bHaveNote = true;

								 bValidInput = true;
						}
						else
						{
							cout << "The scrap of [paper] you found crammed down the [corpse]'s throat is " << endl
								 << "already in your possession." << endl
								 << endl;

							bValidInput = true;
						}
					}

					if(UIFinalCommand.SSecondWord == "hall-tree")
					{
						cout << "Though the [hall-tree] is fairly thin and light, you suspect any " << endl
							<< "attempt to move the rotting wood would likely just cause the thing " << endl
							<< "to fall apart." << endl
							<< endl;

						bValidInput = true;
					}
				
					if(UIFinalCommand.SSecondWord == "knife")
					{
						if(!bFrontRoomDrawerClosed && bHaveKnife)
						{
					              //------This is as far as we can extend a line of text without wrapping--------//
							cout << "You already have the [knife] you found in the [hall-tree] [drawer]." << endl
								<< endl;

							bValidInput = true;
						}

						if(!bFrontRoomDrawerClosed && !bHaveKnife)
						{
							         //------This is as far as we can extend a line of text without wrapping--------//
							cout << "You reach into the open [drawer] and wrap your fingers around the handle of " << endl
								 << "the long butcher [knife]. As you pull it carefully out of the drawer, you see " << endl
								 << "that its sharp blade is rusted and stained heavily with a sticky, purple " << endl
								 << "substance. Gripping the [knife] in your right hand and testing its weight, " << endl
								 << "you grimly acknowledge it will make a servicable weapon in any fight." << endl
								 << endl
								 << "Your Attack Power has increased by " << iKnifeDamage << "." << endl
								 << endl;

							Self.iPlayerAP += iKnifeDamage;

							bValidInput = true;

							bHaveKnife = true;
						}
					}

					if(UIFinalCommand.SSecondWord == "bandage" && !bFoundFirstHealthKit)
					{
						if(!bFrontRoomDrawerClosed && bHaveHealthKit && bFoundFirstHealthKit)
						{
					              //------This is as far as we can extend a line of text without wrapping--------//
							cout << "You already took the [bandage] you found inside the [hall-tree] [door]." << endl
								<< endl;

							bValidInput = true;
						}

						if(!bFrontRoomDrawerClosed && !bHaveHealthKit)
						{
							cout << "You dig into the open [drawer] and pull out a brown, dusty [bandage]." << endl
								<< "Though it\'s obviously many years old, it still looks thick enough to bandage " << endl
								<< "small wounds and hold back the blood loss that would otherwise result." << endl
								<< endl
								<< "A [bandage] like this could come in handy. You tuck into your other pocket." << endl
								<< endl;

							bValidInput = true;

							bFoundFirstHealthKit = true;
							bHaveHealthKit = true;
						}
					}

					if(!bValidInput)
					{
						cout << "You don't see anything like that around here." << endl
						     << endl;

						bValidInput = true;
					}
			}
		}
		//Take functions end ---------------------------------------------------------------------------///

		//Use functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "use")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to use something, you\'d need to name the object you want to use." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				if(UIFinalCommand.SSecondWord == "knife" && bHaveKnife)
				{
					cout << "What do you want to use your [knife] on?" << endl
						 << ":";

						cin.sync(); //Clears the input buffer, you should ALWAYS use this before getting input
						cin >> SUserInput; //get a value from the user

						if(SUserInput == "corpse")
						{
					               //------This is as far as we can extend a line of text without wrapping--------//
							cout << "Wrinkling your nose and gritting your teeth, you edge toward the swinging, " << endl
								 << "far decayed [corpse]. The rotting eyes within its fleshy eyesockets stare " << endl
								 << "accusingly at you and the [knife] in your right hand." << endl
								 << endl
								 << "Fighting back wave after wave of nausea, you steady your shaking legs and " << endl
								 << "then plunge the butcher [knife] into the [corpse]\'s chest. The dead body " << endl
								 << "shudders with the impact, but its sheer, dead weight keeps it still enough " <<endl
								 << "for you to slowly drag the [knife] down through its wide chest, the rotting " << endl
								 << "flesh parting as easily for the [knife] blade as dry paper." << endl
								 << endl
								 << "Your eyes widen as you realize any bones inside the [corpse]'s body have " << endl
								 << "completely melted, leaving only a brown, gelatinous goop. That goop spills " << endl
								 << "out of the split your [knife] is tearing in the [corpse]'s chest to splatter " << endl
								 << "the floor below, stinking and steaming. A bright flash marks a small, metal " << endl
								 << "object falling from the [corpse]'s abdomen to clatter across the floor. Though " << endl
								 << "it\'s stained with blood and brown goop, it\'s easily recognizable as a [key]." << endl
								 << endl;

							bFrontRoomKeyFound = true;
							bCorpseOpen = true;

							bValidInput = true;
						}

						if(SUserInput == "self")
						{
							cout << "You don't want to do that. Well, at least not yet." << endl
								 << endl;

							bValidInput = true;
						}

						if(SUserInput == "hall-tree")
						{
					              //------This is as far as we can extend a line of text without wrapping--------//
							cout << "You raise your [knife], stare at the worn wooden [hall-tree], and " << endl
								 << "then lower it. The sadly abused furniture has already suffered enough." << endl
								 << endl;

							bValidInput = true;
						}

						if(SUserInput == "drawer")
						{
							cout << "You shove the tip of your [knife] into the [drawer], managing to " << endl
								 << "gouge out a tiny chip of wood. The wood is far too tough for your " << endl
								 << "[knife] to do much damage, however." << endl
								 << endl;

							bValidInput = true;
						}
				}

				if(UIFinalCommand.SSecondWord == "key" && bHaveKey)
				{
					if(bHallWayDoorLocked)
					{
						cout << "You edge around the [corpse] swinging from the rafters and approach the " << endl
							<< "closed [double-doors]. Hand shaking, you manage to fit the small silver " << endl
							<< "[key] into the locking mechanism. You hear the locking mechanism snapping " << endl
							<< "open with a loud CRACK. Having unlocked the [double-doors], you tuck the " << endl
							<< "[key] back into your pocket." << endl
							<< endl;

						bHallWayDoorLocked = false;
						bValidInput = true;
					}
					else
					{
						if(!bHallWayDoorLocked && bHaveKey)
						{
							if(bHallWayDoorClosed)
							{
								cout << "You edge around the [corpse] swinging from the rafters and approach the " << endl
									<< "closed [double-doors]. Hand shaking, you manage to fit the small silver " << endl
									<< "[key] into the locking mechanism. You turn the key until you hear the " << endl
									<< "locking mechanism snap closed, then tuck the [key] back into your pocket." << endl
									<< endl;

								bHallWayDoorLocked = true;
								bValidInput = true;
							}
							else
							{
								cout << "The wooden [double-doors] are still wide open, so locking them with the " << endl
									 << "small silver [key] isn't possible. You'd need to close the doors first." << endl
									 << endl;

								bValidInput = true;
							}
						}
					}
				}

				if(UIFinalCommand.SSecondWord == "ropes" && bHaveRope)
				{
					cout << "A quick glance at the tight noose tied around the [corpse]\'s dessicated " << endl
						 << "neck assures you this room has all the rope it needs, right now." << endl
					     << endl;

					bValidInput = true;
				}	

				if(UIFinalCommand.SSecondWord == "blindfold" && bHaveBlindfold)
				{
					cout << "Even if you covered your eyes with the [blindfold], there would still be." << endl
						 << "the smell." << endl
						 << endl;

					bValidInput = true;
				}

				if(UIFinalCommand.SSecondWord == "bandage" && bHaveHealthKit)
				{
					bValidInput = true;

					if(Self.iPlayerHP < Self.iPlayerMaxHP)
					{
						cout << "You press the bandage to one of your cuts, anxious to stop the bleeding. " << endl
							 << "Though it\'s not a permanent fix, you think the bandage will hold for the " << endl
							 << "time being." << endl
							 << endl
							 << "You gain " << iHealthKitHP << " HP." << endl
							 << endl;

						Self.iPlayerHP += iHealthKitHP;

						//Error check to make sure the player doesn't exceed their max HP
						if(Self.iPlayerHP > Self.iPlayerMaxHP) //if bandage puts player over their max HP...
						{
							Self.iPlayerHP = Self.iPlayerMaxHP; //reset their HP to correct full number
						}

						bHaveHealthKit = false;
					}
					else
					{
						cout << "You see no need for the [bandage]. You aren't bleeding." << endl
							 << endl;
					}
				}

				if(!bValidInput)
				{
				cout << "You're not sure how to go about using that at the moment." << endl
					 << endl;
				
				bValidInput = true;
				}
			}
		}
		//Use functions end ---------------------------------------------------------------------------///

		//Open functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "open")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to open something, you\'d need to name the object you want to open." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				if(UIFinalCommand.SSecondWord == "door")
				{
					if(!bFrontPorchDoorBanging)
					{
						cout << "You turn the rusted brass handle of the mansion's [front] door and give it " << endl
							<< "a push. The wind catches the [door] immediately and slams it violently back " << endl
							<< "against it\'s frame, rattling the entire room." << endl
							<< endl;

						bFrontPorchDoorBanging = true;

						bValidInput = true;
					}
					else
					{
						cout << "The front [door] of the mansion is already open, swinging violently " << endl
							<< "open and shut in the grip of the fierce, howling wind outside. Each " << endl
							<< "impact from the whipping door rattles the frame and front room." << endl
							<< endl;

						bValidInput = true;
					}
				}

				if(UIFinalCommand.SSecondWord == "double-doors")
				{
					if(bHallWayDoorLocked)
					{
							   //------This is as far as we can extend a line of text without wrapping--------//
						cout << "You tug on the worn brass handles of the [double-doors] leading further " << endl
							 << "into the mansion with no success. They're locked tight, and your " << endl
							 << "efforts to force them open leave you breathing hard as you step away." << endl
							 << endl;

						bValidInput = true;
					}
					else
					{
							   //------This is as far as we can extend a line of text without wrapping--------//
						cout << "You tug on the worn brass handles of the [double-doors] leading further " << endl
							 << "into the mansion. They come open with the shriek of rusted, protesting " << endl
							 << "hinges, moving apart to allow you entry to the dark hallway to the [north]." << endl
							 << endl;

						bHallWayDoorClosed = false;
						bValidInput = true;
					}
				}
				
				//------This is as far as we can extend a line of text without wrapping--------//
				if(UIFinalCommand.SSecondWord == "hall-tree")
				{
					       //------This is as far as we can extend a line of text without wrapping--------//
					cout << "You doubt there is any way to open the [hall-tree] itself, being that it is " << endl
						 << "made of solid wood. The [drawer] built into it, however... " << endl
						 << endl;

					bValidInput = true;
				}

				if(UIFinalCommand.SSecondWord == "drawer")
				{
					if(bFrontRoomDrawerClosed)
					{	
						       //------This is as far as we can extend a line of text without wrapping--------//
						cout << "You grip the brass handle of the small [drawer] in the [hall-tree] with two " << endl
							 << "fingers and pull it carefully open. The [drawer] squeaks with disuse." << endl
							 << endl;

						bFrontRoomDrawerClosed = false;

						bValidInput = true;
					}	
					else
					{
						cout << "The small [drawer] in the [hall-tree] by the front [door] is already open." << endl
						     << endl;

						bValidInput = true;
					}
				}

				if(UIFinalCommand.SSecondWord == "corpse")
				{
					if(!bHaveKnife && !bCorpseOpen)
					{
						cout << "That's a disgusting idea. You don't think you can pull a corpse open with " << endl
							 << "your bare hands, even one as horribly decomposed as the one hanging in front " << endl
							 << "of you..." << endl
							 << endl
							 << endl
							 << endl
							 << endl
							 << endl
							 << endl
							 << endl
							 << "...you'd need something much sharper than your hands." << endl
							 << endl;

						bValidInput = true;
					}
					
					if(bHaveKnife && !bCorpseOpen)
					{
						cout << "You glance at the purple-stained [knife] in your right hand, then at the " << endl
							 << "slowly swinging [corpse]. A wave of nausea hits you as you contemplate " << endl
							 << "doing what you just thought about doing." << endl
							 << endl;

						bValidInput = true;
					}

					if(bCorpseOpen)
					{
						cout << "The gently swinging [corpse] hanging from the ceiling rafters is already as " << endl
							 << "open as it\'s going to get. The dessicated, melted insides drip slowly from " << endl
							 << "the long tear down its front torso to gather in a disgusting brown and red " << endl
							 << "pool on the floor of the front room." << endl
							 << endl;

						bValidInput = true;
					}
				}

			}

			if(!bValidInput)
			{
			cout << "You can't open that." << endl
				 << endl;

			bValidInput = true;
			}
		}
		//Open functions end ---------------------------------------------------------------------------///

		//Close functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "close")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to close something, you\'d need to name the object you want to " << endl
					 << "close." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				if(UIFinalCommand.SSecondWord == "door")
				{
					if(bFrontPorchDoorBanging)
					{
						cout << "You reach once more into the freezing night and grab the handle of the " << endl
							<< "wildly swinging [door], tugging hard against the wind. With considerable " << endl
							<< "effort you manage to force the [door] shut, though it continues to rattle " << endl
							<< "in its frame in the howling wind outside." << endl
							<< endl;

						bFrontPorchDoorBanging = false;

						bValidInput = true;
					}
					else
					{
						cout << "The front [door] of the mansion is already tightly closed, though it " << endl
							<< "rattles angrily in its frame." << endl
							<< endl;

						bValidInput = true;
					}
				}

				if(UIFinalCommand.SSecondWord == "double-doors")
				{
					if(bHallWayDoorClosed)
					{
							   //------This is as far as we can extend a line of text without wrapping--------//
						cout << "The thick [double-doors] leading to the hallway are already closed." << endl
							 << endl;

						bValidInput = true;
					}
					else
					{
							   //------This is as far as we can extend a line of text without wrapping--------//
						cout << "You grab the worn brass handles of the [double-doors] leading further " << endl
							 << "into the mansion and pull them shut with the shriek of rusted, protesting " << endl
							 << "hinges. The [double-doors] slam together with a shuddering clang, blocking " << endl
							 << "off the dark hallway to the [north]." << endl
							 << endl;

						bHallWayDoorClosed = true;
						bValidInput = true;
					}
				}

				if(UIFinalCommand.SSecondWord == "drawer")
				{
					if(!bFrontRoomDrawerClosed)
					{
					           //------This is as far as we can extend a line of text without wrapping--------//
						cout << "You push the small [drawer] of the [hall-tree] closed with the flat of your " << endl
							 << "palm. The [drawer] squeaks with disuse but slides securely shut." << endl
							 << endl;

						bValidInput = true;

						bFrontRoomDrawerClosed = true;
					}
					else
					{
						cout << "The small [drawer] in the room's [hall-tree] is already tightly shut." << endl
							 << endl;

						bValidInput = true;
					}
				}	

				if(UIFinalCommand.SSecondWord == "corpse")
				{
					if(bCorpseOpen)
					{
						cout << "The ruin your [knife] made of the corpse's torso is far too jagged and " << endl
							 << "messy for you to have any prayer of reversing the damage. You only hope " << endl
							 << "that wherever this person\'s poor soul is now, it has found peace." << endl
							 << endl;

						bValidInput = true;
					}
					else
					{
						cout << "You stare at the swinging, dessicated [corpse] and wrinkle your nose, " << endl
							 << "wondering why such grotesque thoughts are filling your brain." << endl
						     << endl;

						bValidInput = true;
					}
				}

				if(!bValidInput)
				{
				cout << "You can't close that." << endl
					 << endl;
				
				bValidInput = true;
				}
			}
		}
		//Close functions end ---------------------------------------------------------------------------///

		//Attack functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "attack")
		{
			cout << "There's nothing around you can attack right now." << endl
				 << endl;

			bValidInput = true;
		}
		//Attack functions end ---------------------------------------------------------------------------///

		//Quit functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "quit")
		{
			cout << "You are exiting the game." << endl;
			system("pause");
			bInRoom = false;
		}
		//Quit functions here ---------------------------------------------------------------------------///	

		//Error catch all functions below ---------------------------------------------------------------------------///
		if(!bValidInput)
		{
			cout << "The smell must be getting to you. You're not making sense." << endl
			     << endl;
		}

		//reprompt user
		if(bInRoom)
		{
			UIFinalCommand = getUserInput();
			system("cls");
		}
	}

	//Upon exiting the room, send the user to a new destination.
	if(sDestination == "FrontPorch")
	{
		roomFrontPorch();
	}

	if(sDestination == "Hallway")
	{
		roomHall();
	}
}
//----This is a room in our text adventure------------------------------------------------------------//

//----This is a room in our text adventure------------------------------------------------------------//
void roomHall()
{
	//Init the strings we'll use when working with user input in this room.
	userInput UIFinalCommand = {false, "look", "-"};

	//Init room loop
	bool bInRoom = true; //set this to lock the user in the room until they leave
	bool bArrivedAtRoom = true; //set this to alter the text based on if the user is arriving

	//Init a string to hold other rooms reachable from this room
	string sDestination = "-";

	//Init a string to hold additional user input
	string SUserInput = "-";

	//Init input check
	bool bValidInput = false;

	//Start room loop
	while(bInRoom)
	{
		bValidInput = false;

		//Inventory functions here ---------------------------------------------------------------------------///
		//Room loop results are listed below
		if(UIFinalCommand.SFirstWord == "inv")
		{
			getInventory();
			bValidInput = true;
			UIFinalCommand.bTwoWords = false;
			UIFinalCommand.SFirstWord = "look";
		}
		//Inventory functions end-----------------------------------------------------------------------------///

		//Help functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "?")
		{
			getHelp();
			bValidInput = true;
			UIFinalCommand.bTwoWords = false;
			UIFinalCommand.SFirstWord = "look";
		}
		//Help functions end ---------------------------------------------------------------------------///

		//Look functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "look")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				if(bArrivedAtRoom)
				{
					cout << "You step into a narrow hallway thick with shadow and festooned with " << endl
						 << "cogwebs which stretch along the ceiling. Wood debris and chips of " << endl
						 << "concrete are scattered across the floor. A flight of stairs once " << endl
						 << "led up to the second floor, but the stairs themselves have long since " << endl
						 << "rotted through and collapsed. There's no getting upstairs from here." << endl
						<< endl;

					bArrivedAtRoom = false;
				}
				else
				{
					cout << "You're standing in a narrow hallway thick with shadow and festooned with " << endl
						 << "cogwebs which stretch along the ceiling. Wood debris and chips of " << endl
						 << "concrete are scattered across the floor. A flight of stairs once " << endl
						 << "led up to the second floor, but the stairs themselves have long since " << endl
						 << "rotted through and collapsed. There's no getting upstairs from here." << endl
						<< endl;
				}

				if(!bHallWayDoorClosed)
				{
					cout << "A pair of [double-doors] hang open behind you, leading [south] into the front" << endl
						 << "room." << endl
						 << endl;
				}
				else
				{
					cout << "A pair of [double-doors] are to your [south], tightly shut." << endl
						 << endl;
				}

					   //------This is as far as we can extend a line of text without wrapping--------//
				cout << "To the [north] is a wide, open doorway leading to what looks like a kitchen." << endl
					 << "A thick, searing heat creeps down the hallway from inside the kitchen." << endl
					 << endl;

				if(bHallTrapDoorOpen)
				{
					cout << "A thick wooden [trapdoor] rests on the hallway floor in front of the " << endl
						 << "kitchen doorway, revealing a dark, empty [space] beneath the hallway " << endl
						 << "floorboards." << endl
						 << endl;
				}
				else
				{
					       //------This is as far as we can extend a line of text without wrapping--------//
					cout << "A thick wooden [trapdoor] is ahead, closed and flush with the hallway floor." << endl;

					if(bHallTrapDoorTied)
					{
						cout << "Its rusted red [handle] is set next to a tie-down mounted to the floor." << endl
							 << "Two thick [ropes] are tied through the [handle] and tie-down to keep " << endl
							 << "the [trapdoor] securely shut." << endl
							 << endl;
					}
					else
					{
						cout << "Its rusted red [handle] is set next to a tie-down that would work with " << endl
							 << "either a lock or length of rope to keep it securely shut--however, " << endl
							 << "neither of those is present at the moment." << endl
							 << endl;
					}

				}

				if(bDeaditeHasArrived && !bDeaditeIsDead)
				{
					       //------This is as far as we can extend a line of text without wrapping--------//
					cout << "The wide-eyed, wild-haired [madwoman] glares at you from just beside the " << endl
						 << "[trapdoor], hissing like a dying snake. She jerks hard against the iron " << endl
						 << "collar wrapped around her neck, pulling the rusted chain tight with a CRACK!" << endl
						 << "Fortunately, she can't reach you where you stand." << endl
						 << endl;
				}

				if(bDeaditeHasArrived && bDeaditeIsDead)
				{
					       //------This is as far as we can extend a line of text without wrapping--------//
					cout << "The still body of the wild-haired [madwoman] lies still, a broken, bleeding " << endl
						 << "husk of a body that was dead long before you \'killed\' it. The iron collar " << endl
						 << "still wrapped around the corpse's neck bends the corpse's head at a twisted " << endl
						 << "angle, making it obvious the corpse's neck has been shattered." << endl
						 << endl;
				}

				bValidInput = true;
			}
			else //if the user entered two words
			{
				//handle looking at the double-doors
				if(UIFinalCommand.SSecondWord == "double-doors")
				{
					bValidInput = true;

					if(bHallWayDoorClosed)
					{
							    //------This is as far as we can extend a line of text without wrapping--------//
						cout <<	"A pair of closed [double-doors] are behind you to the [south]. The doors are " << endl
							 << "made of dark, thick wood covered in peeling blue paint. The inside of each " << endl
							 << "door is blistered and blackened as if exposed to an extremely hot flame." << endl
							 << endl;
					}
					else
					{
							   //------This is as far as we can extend a line of text without wrapping--------//
						cout <<	"Two wooden [double-doors] hang open behind you to the [south]. The doors are " << endl
							 << "made of dark, thick wood covered in peeling blue paint.  Jagged scratches  " << endl
							 << "that look to have been clawed by a wild animal mar both doors, and the thick " << endl
							 << "brass handles are rusted and blackened with age." << endl
							 << endl;
					}
				}

				//handle looking at the trap door
				if(UIFinalCommand.SSecondWord == "trapdoor")
				{
					bValidInput = true;

					if(bHallTrapDoorOpen)
					{
							    //------This is as far as we can extend a line of text without wrapping--------//
						cout << "A thick wooden [trapdoor] rests on the hallway floor in front of the " << endl
							 << "kitchen doorway, revealing a dark, empty [space] beneath the hallway " << endl
							 << "floorboards. Though the wood has started to rot, it still looks more than " << endl
							 << "thick enough to keep something out--or in. The underside of the [trapdoor] " << endl
							 << "is stained with long, black streaks of dried blood. The streaks are spaced " << endl
							 << "just about the right width apart to have been made by a slim female hand." << endl
							 << endl;
					}
					else
					{
							   //------This is as far as we can extend a line of text without wrapping--------//
						cout <<	"A thick wooden [trapdoor] sits just before the doorway leading into the " << endl
							 << "kitchen, resting flush with the hallway floor. The thick wood is dark with " << endl
							 << "age but still looks sturdy enough to support weight." << endl
							 << endl;

							 if(bHallTrapDoorTied)
							 {
								cout << "A rusted red [handle] is set next to a tie-down mounted to the floor." << endl
									 << "Two thick [ropes] are tied through the [handle] and tie-down to keep " << endl
									 << "the [trapdoor] securely shut." << endl
									 << endl;
							 }
							 else
							 {
								cout << "A rusted red [handle] is set next to a tie-down that would work with " << endl
									 << "either a lock or length of rope to keep it securely shut." << endl
									 << endl;
							 }
					}
				}

				//handle looking at the trap door
				if(UIFinalCommand.SSecondWord == "handle")
				{
					bValidInput = true;

					if(bHallTrapDoorTied)
					{
						cout << "A rusted red [handle] is set next to a tie-down mounted to the floor." << endl
							 << "Two thick [ropes] are tied through the [handle] and tie-down to keep " << endl
							 << "the [trapdoor] securely shut." << endl
							 << endl;
					}
					else
					{
						cout << "A rusted red [handle] is set next to a tie-down that would work with " << endl
							 << "either a lock or length of rope to keep the [trapdoor] securely shut." << endl
							 << endl;
					}
				}

				//Handle looking at the deadite after it appears
				if(UIFinalCommand.SSecondWord == "madwoman")
				{
					if(!bDeaditeIsDead && bDeaditeHasArrived)
					{
							    //------This is as far as we can extend a line of text without wrapping--------//
						cout << "The wide-eyed, wild-haired [madwoman] glares at you from where she stands " << endl
							 << "beside the [trapdoor], contining to make the odd, chilling sound that's " << endl
							 << "somewhere behind a hiss and a choke. Her long fingers clench and unclench " << endl
							 << "as she jerks in vain at the heavy iron collar around her neck, attached to " << endl
							 << "a rusted iron chain leading down into the open space beneath the [trapdoor]. " << endl
							 << "Nothing but blind hatred fills her bloodshot eyes, and her rotting skin shows " << endl
							 << "that if she was ever alive, she certainly isn't now. A supernatural force " << endl
							 << "seems to animate her every jerky move." << endl
							 << endl;

						bValidInput = true;
					}
					
					if(bDeaditeIsDead && bDeaditeHasArrived)
					{
						cout << "The [madwoman] has ceased all movement, the wounds from her fight with you " << endl
							 << "oozing blackish, gooey blood. Her traumatized, long dead body has finally " << endl
							 << "ceased any and all animation." << endl
							 << endl;

						bValidInput = true;
					}
				}

				if(UIFinalCommand.SSecondWord == "space" && bHallTrapDoorOpen)
				{
					if(!bDeaditeIsDead)
					{
						cout << "You take one look at the hissing [madwoman] by the open [trapdoor] and " << endl
							 << "shudder. You aren't getting anywhere NEAR close enough to get a good " << endl
							 << "look inside as long as she's standing there, flexing her hands." << endl
							 << endl;

						bValidInput = true;
					}
					else
					{
							//------This is as far as we can extend a line of text without wrapping--------//
						cout << "Staying well clear of the still corpse of the [madwoman], you peer into the " << endl
							 << "[space] beneath the open [trapdoor]." << endl
							 << endl
							 << "The tiny room beneath the [trapdoor] is barely bigger than a single car " << endl
							 << "garage, formed of poured concrete. The rusted iron chain attached to the " << endl
							 << "collar that held the screaming, raving [madwoman] is mounted to one " << endl
							 << "concrete wall. Ancient, dark red blood stains in groups of five stain " << endl
							 << "the walls, around the right width to be made by clawing female fingers." << endl
							 << endl
							 << "Whoever the woman was before she died and... whatever... reanimated her, " << endl
							 << "it looks like someone kept her locked in this tiny room beneath the hall " << endl
							 << "for a very, very long time." << endl
							 << endl;

						bValidInput = true;
					}
				}
			}
		}
		//Look functions end ---------------------------------------------------------------------------///

		//Go functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "go")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to go somewhere, you\'d need to choose a direction. " << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				if(UIFinalCommand.SSecondWord == "north")
				{
					if(bHallTrapDoorTied)
					{
							   //------This is as far as we can extend a line of text without wrapping--------//
						cout << "You walk down the hall, floorboards creaking with each step." << endl
							 << endl;

						if(!bDeaditeIsDead)
						{
							 cout << "As you approach the [trapdoor] it starts bucking violently, the [handle] " << endl
								  << "smashing against the tie-down mounted to the floor. You give the thrashing " << endl
								  << "[trapdoor] a wide berth as you step around it, heading for the kitchen." << endl
								  << endl
								  << "A long, tortured shriek sounds from below the [trapdoor] as it slams " << endl
								  << "repeatedly against the [ropes] locking it shut, but it doesn't come open." << endl
								  << endl;
						}
						else
						{
							 cout << "You step carefully around the [trapdoor] built into the hallway floor, all " << endl
								  << "too conscious of what was imprisoned beneath it, and head for the kitchen." << endl
								  << endl;
						}

						system("pause");
						system("cls");

						sDestination = "Kitchen";

						bValidInput = true;
						bInRoom = false;
					}
					else
					{
					
						if(!bDeaditeIsDead)
						{
							if(!bHallPlayerWarned)
							{
									//------This is as far as we can extend a line of text without wrapping--------//
								cout << "You start down the hall, floorboards creaking with each step. As you move " << endl
									<< "toward the [trapdoor], however, it bucks violently, popping up before " << endl
									<< "slamming shut again. You jump back, staring at the [trapdoor] as it " << endl
									<< "quivers before settling again. Your heart is racing, and you're not " << endl
									<< "sure how good an idea walking across that unsecured [trapdoor] is." << endl
									<< endl;

								bHallPlayerWarned = true;
								bValidInput = true;
							}
							else
							{
								if(!bDeaditeHasArrived)
								{
										//------This is as far as we can extend a line of text without wrapping--------//
									cout << "You start down the hall, floorboards creaking with each step. You eye the " << endl
										<< "[trapdoor] as you approach. Your heart leaps into your throat as it pops " << endl
										<< "open once more, and a wild-eyed, wild-haired THING clambers up into the " << endl
										<< "hall. The only thing that stops the [madwoman] from tearing off your head " << endl
										<< "is the thick iron collar wrapped around her neck, attached to a rusted " << endl
										<< "chain leading into the darkness below the trapdoor." << endl
										<< endl
										<< "You stumble backwards, barely keeping your feet." << endl
										<< endl;

									bValidInput = true;					
									bDeaditeHasArrived = true;
									bHallTrapDoorOpen = true;
								}
								else
								{
									cout << "The [madwoman] stands between you and the kitchen to the [north]. When you " << endl
										<< "try to get get past her, she jerks violently on the end of her rusted metal " << endl
										<< "chain and nearly sinks her bloody nails into your head. You back away, " << endl
										<< "certain you aren't going to get past her as long as she's guarding the " << endl
										<< "entrance to the kitchen." << endl
										<< endl;

									bValidInput = true;	
								}
							}
						} //Deadite dead loop
						else
						{
								//------This is as far as we can extend a line of text without wrapping--------//
							cout << "You walk down the hall, floorboards creaking with each step. You step " << endl
							     << "carefully around the [trapdoor] built into the hallway floor, all too " << endl
							     << "conscious of what was imprisoned beneath it, and head for the kitchen." << endl
							     << endl;

							system("pause");
							system("cls");

							bValidInput = true;

							sDestination = "Kitchen";

							bValidInput = true;
							bInRoom = false;
						}
					}
				}

				if(UIFinalCommand.SSecondWord == "east")
				{
					bValidInput = true;

					      //------This is as far as we can extend a line of text without wrapping--------//
					cout << "The wall to your [east] is quite solid. You can't go that way." << endl
						 << endl;
				}

				if(UIFinalCommand.SSecondWord == "west")
				{
					bValidInput = true;

					      //------This is as far as we can extend a line of text without wrapping--------//
					cout << "Though what was once a stairway used to lead up to the second floor of the " << endl
						 << "mansion to your [west], all the stairs have long since rotted away. You " << endl
						 << "can't go upstairs from here or make any progress [west]." << endl
						 << endl;
				}

				if(UIFinalCommand.SSecondWord == "south")
				{
					bValidInput = true;

					if(bHallWayDoorClosed)
					{
						cout << "You can't go that way. The [double-doors] to your [south] are shut." << endl
							 << endl;

						bValidInput = true;
					}
					else
					{
							//------This is as far as we can extend a line of text without wrapping--------//
						cout << "You turn from the dark hallway and open kitchen doorway to the [north] and " << endl
							<< "leave the hallway through the open [double-doors] to the [south]." << endl
							<< endl;

						if(bDeaditeHasArrived && !bDeaditeIsDead)
						{
							cout << "The [madwoman] standing beside the [trapdoor] cackles insanely as you " << endl
								<< "back [south] into the front room. The moment you step out of the " << endl
								<< "hallway she seems to lose all interest in you, retreating back into " << endl
								<< "the dark space beneath the hallway. Her lithe, reaching hand stretches " << endl
								<< "up to grip the bottom of the [trapdoor] and pull it shut with almost " << endl
								<< "inhuman strength. It closes with a loud CRACK that echoes through the " << endl
								<< "house." << endl
								<< endl;

							bHallTrapDoorOpen = false;
							bDeaditeHasArrived = false;
						}

						system("pause");
						system("cls");

						bInRoom = false;

						sDestination = "FrontRoom";
					}
				}

			}
		}
		//Go functions end ---------------------------------------------------------------------------///

		//Take functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "take")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to take something, you\'d need to choose an object you want to take." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
					if(UIFinalCommand.SSecondWord == "ropes")
					{
						if(bHallTrapDoorTied)
						{
					              //------This is as far as we can extend a line of text without wrapping--------//
							cout << "You kneel by the [trapdoor] and carefully untie the [ropes] from the tight " << endl
								 << "knot wrapped around the [handle]. You rise and tuck the [ropes] back into " << endl
								 << "your pocket. Anyone could open the [trapdoor], now." << endl
								 << endl;

							bHaveRope = true;
							bHallTrapDoorTied = false;
							bValidInput = true;
						}
					}

					if(UIFinalCommand.SSecondWord == "madwoman" && bDeaditeHasArrived)
					{
						bValidInput = true;

							if(!bDeaditeIsDead)
							{
										//------This is as far as we can extend a line of text without wrapping--------//
								cout << "The [madwoman] hisses angrily as you approach, ready to bite off any body " << endl
									 << "part that comes into her reach. You're not taking her without a fight." << endl
									 << endl;
							}
							else
							{
								cout << "You suppose there's some sick, deranged person in this awful world who might " << endl
									 << "have a use for a blood-soaked, twisted, recently rekilled corpse. You aren't " << endl
									 << "that person, however." << endl
									 << endl;
							}
					}

					if(!bValidInput)
					{
						cout << "You don't see anything like that in this room." << endl
						     << endl;

						bValidInput = true;
					}
			}
		}
		//Take functions end ---------------------------------------------------------------------------///

		//Use functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "use")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to use something, you\'d need to name the object you want to use." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				if(UIFinalCommand.SSecondWord == "knife" && bHaveKnife && bDeaditeHasArrived && !bDeaditeIsDead)
				{
					cout << "You brandish the [knife] in your right hand, staring at the [madwoman]. She " << endl
					     << "hisses and spreads her clawed hands, as if inviting you to try." << endl
						 << endl;

					bValidInput = true;
				}	

				if(UIFinalCommand.SSecondWord == "ropes" && bHaveRope)
				{
					cout << "What do you want to use the [ropes] on?" << endl
						 << ":";

					cin.sync(); //Clears the input buffer, you should ALWAYS use this before getting input
					cin >> SUserInput; //get a value from the user

					if(SUserInput == "trapdoor")
					{
						cout << "You can't attach the [ropes] directly to the trap door, but you might have " << endl
							 << "some success with the rusting metal [handle]..." << endl
							 << endl;

						bValidInput = true;
					}

					if(SUserInput == "madwoman" && bDeaditeHasArrived && !bDeaditeIsDead)
					{
									//------This is as far as we can extend a line of text without wrapping--------//
								cout << "You reach down for the thick [ropes] tucked into your pocket and pull them " << endl
									<< "out, but a single look at the [madwoman]'s wild bloodshot eyes and clawing, " << endl
									<< "grasping hands assures you you have no chance of tying her up. She'd rip " << endl
									<< "out your intestines first." << endl
									<< endl
									<< "You do wonder about the [handle] on the [trapdoor], though. If only it was " << endl
									<< "still closed..." << endl
									<< endl;

								bValidInput = true;
					}

					if(SUserInput == "handle")
					{
						if(!bHallTrapDoorOpen)
						{
							if(!bHallTrapDoorTied)
							{
											//------This is as far as we can extend a line of text without wrapping--------//
										cout << "Creeping forward, you quietly slip the [ropes] through the [handle] of the " << endl
											<< "[trapdoor], looping them over themselves and tying them in a firm square " << endl
											<< "knot. You pull the knot tight and step back. You don't think anyone could " << endl
											<< "open the [trapdoor] now that it\'s tied shut." << endl
											<< endl;

										bHallTrapDoorTied = true;
										bValidInput = true;
										bHaveRope = false;
							}
						}
						else
						{
									cout << "You'd need to close the [trapdoor] before tying it shut with the [ropes]." << endl
										 << endl;

									if(bDeaditeHasArrived && !bDeaditeIsDead)
									{
										cout << "You're not going to get near the [trapdoor] while the [madwoman] is slavering " << endl
											 << "over it. However, she might lose interest if you retreated... " << endl
											 << endl;
									}

									bValidInput = true;
						}
					}

					if(SUserInput == "self")
					{
								cout << "You shake your head. You've been tied up enough for one night." << endl
									 << endl;

								bValidInput = true;
					}
				}	

				if(UIFinalCommand.SSecondWord == "blindfold" && bHaveBlindfold)
				{
					cout << "You eye the [blindfold], but can't think of a good use for it right now." << endl
						 << endl;

					bValidInput = true;
				}

				if(UIFinalCommand.SSecondWord == "bandage" && bHaveHealthKit)
				{
					bValidInput = true;

					if(Self.iPlayerHP < Self.iPlayerMaxHP)
					{
						cout << "You press the bandage to one of your cuts, anxious to stop the bleeding. " << endl
							 << "Though it\'s not a permanent fix, you think the bandage will hold for the " << endl
							 << "time being." << endl
							 << endl
							 << "You gain " << iHealthKitHP << " HP." << endl
							 << endl;

						Self.iPlayerHP += iHealthKitHP;

						//Error check to make sure the player doesn't exceed their max HP
						if(Self.iPlayerHP > Self.iPlayerMaxHP) //if bandage puts player over their max HP...
						{
							Self.iPlayerHP = Self.iPlayerMaxHP; //reset their HP to correct full number
						}

						bHaveHealthKit = false;
					}
					else
					{
						cout << "You see no need for the [bandage]. You aren't bleeding." << endl
							 << endl;
					}
				}

				if(!bValidInput)
				{
				cout << "You're not sure how to go about using that at the moment." << endl
					 << endl;
				
				bValidInput = true;
				}
			}
		}
		//Use functions end ---------------------------------------------------------------------------///

		//Open functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "open")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to open something, you\'d need to name the object you want to open. " << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				//Handle opening the trapdoor
				if(UIFinalCommand.SSecondWord == "trapdoor")
				{
					if(!bHallTrapDoorOpen)
					{
						if(!bHallTrapDoorTied)
						{
								if(!bDeaditeIsDead)
								{
									cout << "You creep forward, kneel, and carefully grasp the [handle] of the [trapdoor] " << endl
										<< "in the hallway floor. As you reach toward the [handle], however, you hear a " << endl
										<< "long, low, choking sound rising from beneath the closed [trapdoor]. It sounds " << endl
										<< "like a cross between a hiss and a growl. The sound chills your blood." << endl
										<< endl
										<< "Are you sure you want to open the trapdoor? (yes/no)" << endl
										<< endl;

										bValidInput = true;

									cin.sync(); //Clears the input buffer, you should ALWAYS use this before getting input
									cin >> SUserInput; //get a value from the user

									if(SUserInput == "yes" || SUserInput == "y")
									{
										if(!bDeaditeHasArrived)
										{
												//------This is as far as we can extend a line of text without wrapping--------//
											cout << "Heart pounding in your chest, you slowly pull open the [trapdoor]." << endl
												<< endl
												<< "A piercing scream fills the hall. Your heart leaps into your throat as a " << endl
												<< "wild-eyed, wild-haired THING clambers out of the [space] hidden under the " << endl
												<< "hall. The only thing that stops the [madwoman] from tearing off your head " << endl
												<< "is the thick iron collar wrapped around her neck, attached to a rusted " << endl
												<< "chain leading into the darkness below the trapdoor." << endl
												<< endl
												<< "You stumble backwards, barely keeping your feet." << endl
												<< endl;

											bValidInput = true;					
											bDeaditeHasArrived = true;
											bHallTrapDoorOpen = true;
										}
									}
									else
									{
										cout << "You back away from the [trapdoor], not ready to confront whatever waits " << endl
											 << "beneath it." << endl
											 << endl;

										bValidInput = true;
									}
								}
								else
								{
									if(!bHallTrapDoorTied)
									{
									cout << "You creep forward, kneel, and carefully grasp the [handle] of the [trapdoor] " << endl
										<< "in the hallway floor. There are no more sounds from the THING you killed." << endl
										<< "Grimacing at the sound of protesting, rusting hinges, you slowly ease the " << endl
										<< "[trapdoor] open and set it on the hallway floor. The empty [space] below " << endl
										<< "is as quite as a tomb." << endl
										<< endl;

										bHallTrapDoorOpen = true;
										bValidInput = true;
									}
								}
						}
						else
						{
							cout << "You can't open the [trapdoor]. The [ropes] tie it shut quite securely." << endl
								 << endl;

							bValidInput = true;
						}
					}
					else
					{
							cout << "The [trapdoor] is already open, propped against the hallway floor." << endl
								<< endl;

							if(bDeaditeHasArrived && !bDeaditeIsDead)
							{
								cout << "The wide-eyed, wild-haired [madwoman] hisses at you as she struggles " << endl
									<< "against the iron collar around her neck, her clawed hands reaching for " << endl
									<< "your throat. Drool and blood sputters from her open mouth." << endl
									<< endl;
							}

							bValidInput = true;
					}
				}

				//Handle the code for the hallway door
				//bHallWayDoorClosed
				//bHallWayDoorLocked
				if(UIFinalCommand.SSecondWord == "double-doors")
				{
					if(bHallWayDoorClosed)
					{
						if(bHallWayDoorLocked)
						{
							cout << "You tug on the worn brass handles of the [double-doors] leading back [south] " << endl
								 << "to the front room, but they're locked tight. You'd need to unlock them." << endl
								 << endl;

							bValidInput = true;
						}
						else
						{
							cout << "You tug on the worn brass handles of the [double-doors] leading back to the " << endl
								 << "front room. With a shriek of protesting joints, the [double-doors] swing " << endl
								 << "open, revealing the front room and hanging corpse to the [south]." << endl
								 << endl;

							bHallWayDoorClosed = false;
							bValidInput = true;
						}
					}
					else
					{
						cout << "The [double-doors] leading [south] to the front room are already open." << endl
							 << endl;

						bValidInput = true;
					}
				}

			}
		}
		//Open functions end ---------------------------------------------------------------------------///

		//Close functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "close")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					   //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to close something, you\'d need to name the object you want to " << endl
					 << "close." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				//Handle opening the trapdoor
				if(UIFinalCommand.SSecondWord == "trapdoor")
				{
					if(bHallTrapDoorOpen)
					{
						if(!bDeaditeIsDead)
						{
							cout << "You edge toward the open [trapdoor], but the screaming [madwoman] jerks on the " << endl
								 << "end of her chain and snaps her teeth, nearly biting your hand off. Cursing, " << endl
								 << "you back away from the open [trapdoor.] You aren't closing it while the " << endl
								 << "[madwoman] is guarding it." << endl
								 << endl;

								bValidInput = true;
						}
						else
						{
							cout << "You creep forward, kneel, and lift the [trapdoor] from the hallway floor with " << endl
								<< "a considerable effort. You push it over and it slams shut with a loud BANG! " << endl
								<< "that reverberates throughout the mansion." << endl
								<< endl;

								bHallTrapDoorOpen = false;
								bValidInput = true;
						}
					}
					else
					{
							cout << "The [trapdoor] is already closed." << endl
								<< endl;

							if(bDeaditeHasArrived && !bDeaditeIsDead)
							{
								cout << "If you're very still and very quiet, you could swear you hear something " << endl
									 << "BREATHING beneath the [trapdoor]." << endl
									 << endl;
							}

							
							bValidInput = true;
					}
				}

				//Handle the code for the hallway door
				//bHallWayDoorClosed
				//bHallWayDoorLocked
				if(UIFinalCommand.SSecondWord == "double-doors")
				{
					if(!bHallWayDoorClosed)
					{
						cout << "You grab the worn brass handles of the [double-doors] leading back to the " << endl
						     << "front room and pull them shut with a shriek of protesting joints. The " << endl
							 << "[double-doors] to the [south] are now firmly shut." << endl
							 << endl;

						bHallWayDoorClosed = true;
						bValidInput = true;
					}
					else
					{
						cout << "The [double-doors] leading [south] to the front room are already closed." << endl
							 << endl;

						bValidInput = true;
					}
				}

			}
		}
		//Close functions end ---------------------------------------------------------------------------///

		//Attack functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "attack")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to attack something, you\'d need to name the thing you want to " << endl
					 << "attack." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				//Initialize a variable for determining if the player won their combat or not
				bool bWonCombat = false;

				if(UIFinalCommand.SSecondWord == "madwoman" && bDeaditeHasArrived && !bDeaditeIsDead)
				{
					//Initiate combat
					bWonCombat = doCombat(Self.iPlayerHP, Self.iPlayerAP, Lisa.iGhostHP, Lisa.iGhostAP, Lisa.iGhostXP, Lisa.sGhostDescription, Lisa.sGhostAttack);

					if(bWonCombat)
					{
						bDeaditeIsDead = true;
						bValidInput = true;
					}
					else
					{
						bValidInput = true;
					}
				}
			}

			if(!bValidInput)
			{
				cout << "You can't attack that." << endl
					 << endl;
			    
				bValidInput = true;
			}
		}
		//Attack functions end ---------------------------------------------------------------------------///

		//Quit functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "quit")
		{
			cout << "You are exiting the game." << endl;
			system("pause");
			bInRoom = false;
		}
		//Quit functions here ---------------------------------------------------------------------------///	

		//Error catch all functions below ---------------------------------------------------------------------------///
		if(!bValidInput)
		{
			cout << "That doesn't make any sense." << endl
			     << endl;
		}

		//reprompt user
		if(bInRoom)
		{
			UIFinalCommand = getUserInput();
			system("cls");
		}
	}

	//Upon exiting the room, send the user to a new destination.
	if(sDestination == "FrontRoom")
	{
		roomFrontRoom();
	}

	if(sDestination == "Kitchen")
	{
		roomKitchen();
	}
}
//----This is a room in our text adventure------------------------------------------------------------//

//----This is a room in our text adventure------------------------------------------------------------//
void roomKitchen()
{
	//Init the strings we'll use when working with user input in this room.
	userInput UIFinalCommand = {false, "look", "-"};

	//Init room loop
	bool bInRoom = true; //set this to lock the user in the room until they leave
	bool bArrivedAtRoom = true; //set this to alter the text based on if the user is arriving

	//Init a string to hold other rooms reachable from this room
	string sDestination = "-";

	//Init a string to hold additional user input
	string SUserInput = "-";

	//Init input check
	bool bValidInput = false;

	//Start room loop
	while(bInRoom)
	{
		bValidInput = false;

		//Inventory functions here ---------------------------------------------------------------------------///
		//Room loop results are listed below
		if(UIFinalCommand.SFirstWord == "inv")
		{
			getInventory();
			bValidInput = true;
			UIFinalCommand.bTwoWords = false;
			UIFinalCommand.SFirstWord = "look";
		}
		//Inventory functions end-----------------------------------------------------------------------------///

		//Help functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "?")
		{
			getHelp();
			bValidInput = true;
			UIFinalCommand.bTwoWords = false;
			UIFinalCommand.SFirstWord = "look";
		}
		//Help functions end ---------------------------------------------------------------------------///

		//Look functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "look")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				if(bArrivedAtRoom)
				{
					cout << "You step into an empty kitchen that feels as hot as a furnace, filled " << endl
						 << "with searing heat that makes it hard to breathe and causes beads of sweat " << endl
						 << "to start pouring down your brow and sides." << endl
						 << endl;

					bArrivedAtRoom = false;
				}
				else
				{
					cout << "You're standing in an empty kitchen that feels as hot as a furnace, " << endl
						 << "filled with searing hot that makes it hard to breath and has already " << endl
						 << "covered your brow and sides with slick, sticky sweat." << endl
						 << endl;

					bArrivedAtRoom = false;
				}

					cout << "The wall to the [west] is solid but far from undamaged. It's warped and " << endl
						 << "dark black, almost as if exposed to a searing fire. Most of the wall " << endl
						 << "paper has burned or rotted off. A row of cabinets are to the [east], but " << endl
						 << "the rotting wood and misaligned doors, some hanging open, show only " << endl
						 << "empty shelves." << endl
						 << endl;

				if(!bKitchenOvenDoorOpen)
				{
					cout << "A kitchen counter covered in worn blue tiles is below the cabinets, and " << endl
						 << "a closed [oven] is set beside it. It seems to be emanating the intense " << endl
						 << "heat filling the room." << endl
						 << endl;
				}
				else
				{
					cout << "A kitchen counter covered in worn blue tiles is below the cabinets, and " << endl
						 << "an [oven] yawns open beside it. What looks to be a [man] is stuffed inside " << endl
						 << "the oven, sizzling with intense heat." << endl
						 << endl;
				}

				if(bBackPorchDoorOpen)
				{
					cout << "A small wooden [door] hangs slightly ajar, leading [north] to the back " << endl
						 << "porch. An open doorway to the [south] leads back into the hall." << endl
						 << endl;
				}
				else
				{
					cout << "A small wooden [door] is closed to the [north], and a look out the " << endl
						 << "window at the snow tells you it leads to the back porch. An open doorway " << endl
						 << "to the [south] leads back into the hall." << endl
						 << endl;
				}

				bValidInput = true;
			}
			else //if the user entered two words
			{
				//handle looking at the door
				if(UIFinalCommand.SSecondWord == "door")
				{
					if(bBackPorchDoorOpen)
					{
						cout << "A small wooden [door] hangs slightly ajar, leading [north] to the back " << endl
							<< "porch. An open doorway to the [south] leads back into the hall." << endl
							<< endl;

						bValidInput = true;
					}
					else
					{
						cout << "A small wooden [door] is closed to the [north], and a look out the " << endl
							<< "window at the snow tells you it leads to the back porch. An open doorway " << endl
							<< "to the [south] leads back into the hall." << endl
							<< endl;

						bValidInput = true;
					}
				}

				//handle looking at the oven
				if(UIFinalCommand.SSecondWord == "oven")
				{
					bValidInput = true;

					if(bKitchenOvenDoorOpen)
					{
							   //------This is as far as we can extend a line of text without wrapping--------//
						cout << "The door of the [oven] hangs open, covered in melted chunks of blackened " << endl
							 << "meat that might very possible be seared human flesh. There is a [man] " << endl
							 << "inside the oven, his flesh sizzling with the intense heat. The sight and " << endl
							 << "smells make you want to retch." << endl
							 << endl;
						
						if(!bBakedManIsDead)
						{
						cout << "The [man] in the oven groans louder, one sizzling, blistered hand reaching " << endl
							 << "out for you. It beckons weakly, trying to urge you closer." << endl
							 << endl;
						}
					}
					else
					{
						cout << "The door to the [oven] is closed and rusted with age, but a horrible " << endl
						     << "smell is wafting from inside it, like a dozen rotting steaks cooking " << endl
							 << "at once. There is a note tacked on the door, written in halting " << endl
							 << "cursive. "<< endl
							 << endl
							 << "All the note says is three words... \"Lisa made this.\"" << endl
							 << endl;
					}
				}

				//Handle looking at the baked man if the oven door is open
				if(UIFinalCommand.SSecondWord == "man")
				{
					if(!bBakedManIsDead && bBakedManHasArrived && bKitchenOvenDoorOpen)
					{
							    //------This is as far as we can extend a line of text without wrapping--------//
						cout << "The [man] baking in the oven is groaning piteously, his face having melted " << endl
							 << "to a featureless, meaty lump long ago. Every inch of his flesh is sizzling " << endl
							 << "with wet heat as he writhes on the metal grill inside the oven. Most of his " << endl
							 << "legs are missing but what remains is fused around the bars of the metal " << endl
							 << "grill, locking him forever inside the searing [oven]." << endl
							 << endl
							 << "The smell of baking, sizzling flesh is almost overpowering. It's all you " << endl
							 << "can do to avoid throwing up." << endl
							 << endl;

						bValidInput = true;
					}
					
					if(bBakedManIsDead && bBakedManHasArrived && bKitchenOvenDoorOpen)
					{
						cout << "The [man] baking in the oven is still now, sizzling like a well-cooked steak." << endl
							 << "The blood that covers him from the fight seems to be marinating the meat. " << endl
							 << "The resulting odors are the most disgusting things you have ever smelled. " << endl
							 << "The baking corpse has ceased any and all animation." << endl
							 << endl;

						bValidInput = true;
					}
				}


			}
		}
		//Look functions end ---------------------------------------------------------------------------///

		//Go functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "go")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to go somewhere, you\'d need to choose a direction. " << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				if(UIFinalCommand.SSecondWord == "north")
				{
					bValidInput = true;

					if(!bBackPorchDoorOpen)
					{
						cout << "You can't go that way. The small [door] leading out onto the back " << endl
							 << "porch is still shut." << endl
							 << endl;
					}
					else
					{
						cout << "You push the small kitchen [door] open and go through. " << endl
							 << endl;

						system("pause");
						system("cls");

						bInRoom = false;

						sDestination = "BackPorch";
					}
				}

				if(UIFinalCommand.SSecondWord == "east")
				{
					bValidInput = true;

					      //------This is as far as we can extend a line of text without wrapping--------//
					cout << "The row of rotting cabinets to your east aren't going anywhere, nor is " << endl
						 << "the thick counter covered in faded blue tiles. You can't go that way." << endl
						 << endl;
				}

				if(UIFinalCommand.SSecondWord == "west")
				{
					bValidInput = true;

					      //------This is as far as we can extend a line of text without wrapping--------//
					cout << "The only thing to the [west] is a worn wall covered in blackened wallpaper " << endl
						 << "twisted and hardened by the intense heat. You can't go that way." << endl
						 << endl;
				}

				if(UIFinalCommand.SSecondWord == "south")
				{
					cout << "Shying away from the intense heat, you leave the kitchen." << endl
						 << endl;

					system("pause");
					system("cls");
					
					bValidInput = true;
					bInRoom = false;

					sDestination = "Hall";
				}

			}
		}
		//Go functions end ---------------------------------------------------------------------------///

		//Take functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "take")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to take something, you\'d need to choose an object you want to take." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
					if(UIFinalCommand.SSecondWord == "man" && bBakedManHasArrived)
					{
						bValidInput = true;

							if(!bBakedManIsDead)
							{
										//------This is as far as we can extend a line of text without wrapping--------//
								cout << "The baking [man] swipes at you again as you draw near, desperate to drag you " << endl
									 << "into the sweltering oven with him. You jump back, barely avoiding the grip " << endl
									 << "of his blistered wet hand." << endl
									 << endl;

								bValidInput = true;
							}
							else
							{
								cout << "No. Absolutely not. You aren't THAT hungry." << endl
									 << endl;

								bValidInput = true;
							}
					}

					if(!bValidInput)
					{
						cout << "You don't see anything like that in this room." << endl
						     << endl;

						bValidInput = true;
					}
			}
		}
		//Take functions end ---------------------------------------------------------------------------///

		//Use functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "use")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to use something, you\'d need to name the object you want to use." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				if(UIFinalCommand.SSecondWord == "knife" && bHaveKnife && bBakedManHasArrived && !bBakedManIsDead)
				{
					cout << "You brandish the [knife] in your right hand, staring at the [man] baking " << endl
					     << "inside the oven. He moans piteously as his flesh continues to sizzle " << endl
						 << "furiously, almost as if begging you to free him from his torment." << endl
						 << endl;

					bValidInput = true;
				}	

				if(UIFinalCommand.SSecondWord == "bandage" && bHaveHealthKit)
				{
					bValidInput = true;

					if(Self.iPlayerHP < Self.iPlayerMaxHP)
					{
						cout << "You press the bandage to one of your cuts, anxious to stop the bleeding. " << endl
							 << "Though it\'s not a permanent fix, you think the bandage will hold for the " << endl
							 << "time being." << endl
							 << endl
							 << "You gain " << iHealthKitHP << " HP." << endl
							 << endl;

						Self.iPlayerHP += iHealthKitHP;

						//Error check to make sure the player doesn't exceed their max HP
						if(Self.iPlayerHP > Self.iPlayerMaxHP) //if bandage puts player over their max HP...
						{
							Self.iPlayerHP = Self.iPlayerMaxHP; //reset their HP to correct full number
						}

						bHaveHealthKit = false;
					}
					else
					{
						cout << "You see no need for the [bandage]. You aren't bleeding." << endl
							 << endl;
					}
				}

				if(!bValidInput)
				{
				cout << "You're not sure how to go about using that at the moment." << endl
					 << endl;
				
				bValidInput = true;
				}
			}
		}
		//Use functions end ---------------------------------------------------------------------------///

		//Open functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "open")
		{ //open loop
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to open something, you\'d need to name the object you want to open. " << endl
					 << endl;				

				bValidInput = true;
			}

			else
			{ //two words else loop
				//Handle opening the kitchen door
				if(UIFinalCommand.SSecondWord == "door")
				{
					bValidInput = true;

					if(!bBackPorchDoorOpen)
					{
					               //------This is as far as we can extend a line of text without wrapping--------//
						cout << "You reach up to unlock the thick metal lock keeping the back [door] shut " << endl
							 << "and unlatch it with a dull CLICK, then carefully push the back [door] open. " << endl
							 << "The frigid wind outside tears into the kitchen and just as quickly retreats, " << endl
							 << "unable to stand up to the intense heat. The door hangs slightly ajar as " << endl
						     << "searing heat and frigid cold fight for the right of way between the door and " << endl
							 << "frame." << endl
							 << endl;

						bBackPorchDoorOpen = true;
					}
					else
					{
						cout << "The small back [door] leading out to the back porch is already open." << endl
							 << endl;
					}
				}

				//Handle opening the oven
				if(UIFinalCommand.SSecondWord == "oven")
				{ //oven loop
					if(!bKitchenOvenDoorOpen)
					{ //oven door loop
						if(!bBakedManIsDead)
						{ //baked man dead loop

							       //------This is as far as we can extend a line of text without wrapping--------//
							cout << "As you creep toward the closed oven, the sweltering heat as well as the " << endl
								 << "smell of cooking meat grows even more intense. You pause before the closed " << endl
								 << "[oven] door and eye it with trepidation." << endl
								 << endl;

							cout << "Do you really want to open the [oven] door? (yes/no)" << endl
								<< ":";

							cin.sync(); //Clears the input buffer, you should ALWAYS use this before getting input
							cin >> SUserInput; //get a value from the user

							if(SUserInput == "yes" || SUserInput == "y")
							{
									//------This is as far as we can extend a line of text without wrapping--------//
								cout << "You gingerly grip the hot metal handle of the [oven] door and pull it open. " << endl
									<< "The intense heat sears your hand and flesh as you back away. The inside of " << endl
									<< "the [oven] as well as the inside of the door are still caked with blistered, " << endl
									<< "sizzling human flesh, but that's not the worst of it. There is a [man] crammed " << endl
									<< "inside the oven, his face and most of his flesh already melted away. All that " << endl
									<< "remains is a thick, vaguely humanoid mass of meat covered in sizzling human " << endl
									<< "flesh. It smells like a backyard barbecue." << endl
									<< endl
									<< "Before you can do more than step back, the [man] shaped mass of sizzling " << endl
									<< "meat lunges out of the oven with one blistered hand outstretched, snatching " << endl
									<< "up your hand and trying to drag you into the oven WITH him." << endl
									<< endl;

								system("pause");
								system("cls");

								bKitchenOvenDoorOpen = true;
								bBakedManHasArrived = true;

								//Initialize a variable for determining if the player won their combat or not
								bool bWonCombat = false;

									//Initiate combat
									bWonCombat = doCombat(Self.iPlayerHP, Self.iPlayerAP, James.iGhostHP, James.iGhostAP, James.iGhostXP, James.sGhostDescription, James.sGhostAttack);

									if(bWonCombat)
									{
										bBakedManIsDead = true;
										bValidInput = true;
									}
									else
									{
										bValidInput = true;
									}
							}
							else
							{
								cout << "You step back from the [oven] door, the smell of sizzling meat making your " << endl
									 << "stomach turn violently. It doesn't smell like any meat you ever remember " << endl
									 << "eating, and you wonder just what exactly is cooking inside that [oven]." << endl
									 << endl;

								bValidInput = true;
							}

						} //baked man dead loop
						else
						{ //baked man else loop
							       //------This is as far as we can extend a line of text without wrapping--------//
							cout << "You gingerly grip the hot metal handle of the [oven] door and pull it open. " << endl
								 << "The intense heat sears your hand and flesh as you back away. The inside of " << endl
								 << "the [oven] as well as the inside of the door are still caked with blistered, " << endl
								 << "sizzling human flesh." << endl
								 << endl;

							bKitchenOvenDoorOpen = true;
							bValidInput = true;
						} //baked man else loop

					} //oven door loop
					else
					{ //oven door else loop
						cout << "The [oven] door is already wide open, caked in blistered, sizzling human flesh." << endl
							 << endl;

						bValidInput = true;
					} //oven doorelse loop
				} //oven loop

			} //else loop
		} //open loop
		//Open functions end ---------------------------------------------------------------------------///

		//Close functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "close")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					   //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to close something, you\'d need to name the object you want to " << endl
					 << "close." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				//Handle opening the kitchen door
				if(UIFinalCommand.SSecondWord == "door")
				{
					bValidInput = true;

					if(bBackPorchDoorOpen)
					{
					           //------This is as far as we can extend a line of text without wrapping--------//
						cout << "You slam the wooden kitchen [door] shut with effort, pushing against the " << endl
							 << "cold air flowing in from outside. When you release the door it pops open " << endl
							 << "again, so you close it one last time and then lock it securely." << endl
							 << endl;

						bBackPorchDoorOpen = false;
					}
					else
					{
						cout << "The small back [door] leading out to the back porch is already closed." << endl
							 << endl;
					}
				}

				//Handle closen the oven
				if(UIFinalCommand.SSecondWord == "oven")
				{ //oven loop
					if(bKitchenOvenDoorOpen)
					{ //oven door loop
						if(!bBakedManIsDead)
						{
							       //------This is as far as we can extend a line of text without wrapping--------//
							cout << "The baking [man] swipes at you again as you draw near, desperate to drag you " << endl
								 << "into the sweltering oven with him. You jump back, barely avoiding the grip " << endl
								 << "of his blistered wet hand. You can't close the [oven] while he's in it." << endl
								 << endl;

							bValidInput = true;
						} //baked man dead loop
						else
						{ //baked man else loop
							       //------This is as far as we can extend a line of text without wrapping--------//
							cout << "You gingerly grip the hot metal handle of the [oven] door and push it " << endl
								 << "closed. The metal handle is extremely hot, and you jerk your hand back with " << endl
								 << "a pained hiss, but you manage to close the stinking, flesh-filled [oven] " << endl
								 << "securely." << endl
								 << endl;

							bKitchenOvenDoorOpen = false;
							bValidInput = true;
						} //baked man else loop

					} //oven door loop
					else
					{ //oven door else loop
						cout << "The [oven] door is already closed, though horrible smells waft from inside." << endl
							 << endl;

						bValidInput = true;
					} //oven doorelse loop
				} //oven loop

			}
		}
		//Close functions end ---------------------------------------------------------------------------///

		//Attack functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "attack")
		{
			if(!UIFinalCommand.bTwoWords)
			{
					    //------This is as far as we can extend a line of text without wrapping--------//
				cout << "In order to attack something, you\'d need to name the thing you want to " << endl
					 << "attack." << endl
					 << endl;				

				bValidInput = true;
			}
			else
			{
				//Initialize a variable for determining if the player won their combat or not
				bool bWonCombat = false;

				if(UIFinalCommand.SSecondWord == "man" && bBakedManHasArrived && !bBakedManIsDead)
				{
					//Initiate combat
					bWonCombat = doCombat(Self.iPlayerHP, Self.iPlayerAP, James.iGhostHP, James.iGhostAP, James.iGhostXP, James.sGhostDescription, James.sGhostAttack);

					if(bWonCombat)
					{
						bBakedManIsDead = true;
						bValidInput = true;
					}
					else
					{
						bValidInput = true;
					}
				}
			}

			if(!bValidInput)
			{
				cout << "You can't attack that." << endl
					 << endl;
			    
				bValidInput = true;
			}
		}
		//Attack functions end ---------------------------------------------------------------------------///

		//Quit functions here ---------------------------------------------------------------------------///
		if(UIFinalCommand.SFirstWord == "quit")
		{
			cout << "You are exiting the game." << endl;
			system("pause");
			bInRoom = false;
		}
		//Quit functions here ---------------------------------------------------------------------------///	

		//Error catch all functions below ---------------------------------------------------------------------------///
		if(!bValidInput)
		{
			cout << "That doesn't make any sense." << endl
			     << endl;
		}

		//reprompt user
		if(bInRoom)
		{
			UIFinalCommand = getUserInput();
			system("cls");
		}
	}

	//Upon exiting the room, send the user to a new destination.
	if(sDestination == "BackPorch")
	{
		roomBackPorch();
	}

	if(sDestination == "Hall")
	{
		roomHall();
	}
}
//----This is a room in our text adventure------------------------------------------------------------//

//----This is a room in our text adventure------------------------------------------------------------//
void roomSnowyRoad()
{
		   //------This is as far as we can extend a line of text without wrapping--------//
	cout << "You hurry out of the forest to step onto a wide, two-lane road stretching " << endl
		 << "[east] and [west]. Freedom, at last! You breathe faster as you hear the " << endl
		 << "distinctive sound of a distant truck approaching, sloughing through the " << endl
		 << "wet, winter weather. Headlights flash into view in the distance and " << endl
		 << "rapidly approach." << endl
		 << endl
		 << "You shout and wave your arms on the side of the road, but the truck doesn't " << endl
		 << "slow. Desperate for help, you step into the road and continue waving your " << endl
		 << "arms. The truck\'s headlights all but blind you, and too late you realize " << endl
		 << "it\'s not slowing down!" << endl
		 << endl;

	system("pause");
	system("cls");
		 
		   //------This is as far as we can extend a line of text without wrapping--------//
	cout << "You jump aside at the last second, flailing away from the sound of screeching " << endl
		 << "brakes. A loud voice shouts from the rapidly opening truck window, but " << endl
		 << "as the man in the driver's seat stares at you, he sounds almost apologetic." << endl
		 << endl
		 << "\"Sorry there, friend,\" he says, pushing open his door and beckoning you in. " << endl
		 << "He's an older man, probably in his late 70s. \"Eyes aren't what they used to " << endl
		 << "be.\" He chuckles as you get into the car, shivering with the cold and the " << endl
		 << "horror you just escaped." << endl
		 << endl;

	system("pause");
	system("cls");

		  //------This is as far as we can extend a line of text without wrapping--------//
	cout << "\"It was a sad business,\" the man says as he drives you off, nodding to " << endl
		 << "himself. You blink at him, not sure what he's talking about and still " << endl
		 << "reeling from everything you've seen tonight." << endl
		 << endl
	     << "\"With the Morris's, I mean, \" the man continues. \"You're another of those " << endl
		 << "ghost hunter blokes out to see about the happenings here, eh?\"  When you " << endl
		 << "don't answer, the man just chuckles." << endl
		 << endl
		 << "\"You mean you haven't heard the story?\" the old man asks. Before you can " << endl
		 << "answer, he drones on, perhaps one of those who likes to hear the sound of " << endl
		 << "his own voice. \"It's a strange story, I'll tell you that.\" He chuckles " << endl
		 << "again." << endl
		 << endl;

	system("pause");
	system("cls");

		  //------This is as far as we can extend a line of text without wrapping--------//
	cout << "\"Old man Morris and his wife lived out here all alone, you see, back in " << endl
		 << "the Depression. They did well for themselves, well enough to afford a " << endl
		 << "groundskeeper and some household staff. They even had a little baby girl, " << endl
		 << "five when she died. And she did die, you see.\" The man grins wickedly." << endl
		 << endl
		 << "\"Legend says her mother did it. She got the depression too, you see, went " << endl
		 << "stark raving mad one day and drowned her little girl in the tub. It was " << endl
		 << "tragic, friend, tragic, but what made it worse is when her husband found " << endl
		 << "out. He wasn't the type to get the police involved, no way... he handled " << endl
		 << "things on his own, he did. When the police finally came they found a cell " << endl
		 << "dug beneath his hallway, with a chain and a collar, like you'd use to hold " << endl
		 << "a wild animal. But it wasn't an animal he held, oh no. It was his wife.\"" << endl
		 << endl;

	system("pause");
	system("cls");

		  //------This is as far as we can extend a line of text without wrapping--------//	
	cout << "You try to control your breathing as the man continues, the story of his " << endl
		 << "words all too familiar. " << endl
		 << endl
		 << "\"She must have been in there for years, friend--so long she turned more " << endl
		 << "beast than woman, driven mad by grief for her daughter and by her husband's " << endl
		 << "cruelty. The household staff all left, one by one, but the groundskeeper, " << endl
		 << "he wouldn't stand for such, you see. Not from James Morris. So one day when " << endl
		 << "Mr. Morris was away, the groundskeeper called the police and told them to " << endl
		 << "come save her. He got antsy, though, waiting, and he went to open the cell " << endl
		 << "himself, but he didn't realize how MAD she was. Ms. Morris--they called her " << endl
		 << "Lisa, you see--she clawed his eyes out and chewed up his neck as quick as " << endl
		 << "you please. He managed to get away and lock her in the hall, but the bite " << endl
		 << "was deep. He died right there, friend, but not before swallowing the key. " << endl
		 << "He didn't want old man Morris hurting that poor woman, even in death.\"" << endl
		 << endl;

	system("pause");
	system("cls");
		  //------This is as far as we can extend a line of text without wrapping--------//
	cout << "You try to say something edgewise, but the old man won't hear of it. All " << endl
		 << "that lies ahead is empty, gray snow. You can't even see the road anymore." << endl
		 << endl
		 << "\"So old man Morris comes home and he sees the groundskeeper dead and the " << endl
		 << "hole where his wife was open and then the police pull up outside, and he " << endl
		 << "panics, friend, panics like you won't believe. Now I don't claim to know " << endl
		 << "what he might have been thinking, but he decides to hide, you see, hide " << endl
		 << "in his own wife's oven. He doesn't realize she's still there, you see, " << endl
		 << "hiding up the stairs, and after he climbs in, little Lisa walks into the " << endl
		 << "kitchen and she locks him in, turns the oven on right then and there!\"" << endl
		 << endl
		 << "The old man seems far too amused by the grisly tale, and you feel sick as " << endl
		 << "you remember what you saw in the house." << endl
		 << endl;

	system("pause");
	system("cls");

		  //------This is as far as we can extend a line of text without wrapping--------//
	cout << "\"It was the screams finally got the police inside, friend, screams like " << endl
		 << "a man burning alive. The police bust down the door to find Lisa Morris " << endl
		 << "hissing like a mad thing and James Morris screaming from inside the oven " << endl
		 << "and all matter of hell breaking loose. Lisa, poor, damned soul she is, " << endl
		 << "Lisa charges the police and they shoot her down like a dog, fill her with " << endl
		 << "more holes than a swiss cheese sandwich. James has stopped screaming now, " << endl
		 << "you see, and when they open the oven he's already dead, baked into the oven " << endl
		 << "as pretty as a pie. His wife's pie.\"" << endl
		 << endl
		 << "You swallow, hard, as you see that the road ahead has all but disappeared." << endl
		 << "Nothing but blackness surrounds you, the old man, and the delapidated truck." << endl
		 << endl;

	system("pause");
	system("cls");

		  //------This is as far as we can extend a line of text without wrapping--------//
	cout << "The old man sighs. \"Lisa was a good girl, you see, good before the " << endl
		 << "depression drove her mad. She and James were so happy then. Cheryl was too." << endl
		 << "It's a shame they ended up like they did. If I'd just acted sooner instead " << endl
		 << "letting her rot in the basement all those years...\"" << endl
		 << endl
		 << "Your heart pounds in your throat as you stare at the old man, at the " << endl
		 << "driver of the delapidated truck. For the first time you realize you can " << endl
		 << "see right through him. He smiles at you, a grim, hard expression, and you " << endl
		 << "hold back a scream as you see the inside of a skull beneath his rotting " << endl
		 << "flesh." << endl
		 << endl
		 << "\"Ah, well,\" the ghost of the Morris's groundskeeper says as he takes the " << endl
		 << "fork in the road down toward Hell. \"We've all got our sins to pay for, " << endl
		 << "now don't we... friend?" << endl
		 << endl
		 << endl
		 << "                                 THE END                                   " << endl
		 << endl;

	system("pause");
	system("cls");

	cout << "Congratulations! You have completed 'Hell House'." << endl
	     << endl
		 << "You are now exiting the game." << endl
		 << endl;

	system("pause");
}
//----This is a room in our text adventure------------------------------------------------------------//

// This function handles exiting the game if the player dies
void doPlayerDeath()
{
	system("cls");
	cout << "You have joined the damned souls of the mansion." << endl
		 << endl
		 << "                 GAME OVER                      " << endl
		 << endl;

	system("pause");
}